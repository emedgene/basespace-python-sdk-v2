# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1pre3DirectUploadInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_key': 'str',
        'auth_secret': 'str',
        'auth_token': 'str',
        'expires_on': 'datetime',
        'bucket_name': 'str',
        'prefix': 'str',
        'object_store_url': 'str',
        'region': 'str',
        'encryption_key_id': 'str',
        'encryption_method': 'str'
    }

    attribute_map = {
        'auth_key': 'AuthKey',
        'auth_secret': 'AuthSecret',
        'auth_token': 'AuthToken',
        'expires_on': 'ExpiresOn',
        'bucket_name': 'BucketName',
        'prefix': 'Prefix',
        'object_store_url': 'ObjectStoreUrl',
        'region': 'Region',
        'encryption_key_id': 'EncryptionKeyId',
        'encryption_method': 'EncryptionMethod'
    }

    def __init__(self, auth_key=None, auth_secret=None, auth_token=None, expires_on=None, bucket_name=None, prefix=None, object_store_url=None, region=None, encryption_key_id=None, encryption_method=None):  # noqa: E501
        """V1pre3DirectUploadInformation - a model defined in Swagger"""  # noqa: E501
        self._auth_key = None
        self._auth_secret = None
        self._auth_token = None
        self._expires_on = None
        self._bucket_name = None
        self._prefix = None
        self._object_store_url = None
        self._region = None
        self._encryption_key_id = None
        self._encryption_method = None
        self.discriminator = None
        if auth_key is not None:
            self.auth_key = auth_key
        if auth_secret is not None:
            self.auth_secret = auth_secret
        if auth_token is not None:
            self.auth_token = auth_token
        if expires_on is not None:
            self.expires_on = expires_on
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if prefix is not None:
            self.prefix = prefix
        if object_store_url is not None:
            self.object_store_url = object_store_url
        if region is not None:
            self.region = region
        if encryption_key_id is not None:
            self.encryption_key_id = encryption_key_id
        if encryption_method is not None:
            self.encryption_method = encryption_method

    @property
    def auth_key(self):
        """Gets the auth_key of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The auth_key of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this V1pre3DirectUploadInformation.


        :param auth_key: The auth_key of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._auth_key = auth_key

    @property
    def auth_secret(self):
        """Gets the auth_secret of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The auth_secret of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._auth_secret

    @auth_secret.setter
    def auth_secret(self, auth_secret):
        """Sets the auth_secret of this V1pre3DirectUploadInformation.


        :param auth_secret: The auth_secret of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._auth_secret = auth_secret

    @property
    def auth_token(self):
        """Gets the auth_token of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The auth_token of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this V1pre3DirectUploadInformation.


        :param auth_token: The auth_token of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def expires_on(self):
        """Gets the expires_on of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The expires_on of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this V1pre3DirectUploadInformation.


        :param expires_on: The expires_on of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def bucket_name(self):
        """Gets the bucket_name of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The bucket_name of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this V1pre3DirectUploadInformation.


        :param bucket_name: The bucket_name of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def prefix(self):
        """Gets the prefix of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The prefix of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this V1pre3DirectUploadInformation.


        :param prefix: The prefix of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def object_store_url(self):
        """Gets the object_store_url of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The object_store_url of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._object_store_url

    @object_store_url.setter
    def object_store_url(self, object_store_url):
        """Sets the object_store_url of this V1pre3DirectUploadInformation.


        :param object_store_url: The object_store_url of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._object_store_url = object_store_url

    @property
    def region(self):
        """Gets the region of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The region of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this V1pre3DirectUploadInformation.


        :param region: The region of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def encryption_key_id(self):
        """Gets the encryption_key_id of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The encryption_key_id of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key_id

    @encryption_key_id.setter
    def encryption_key_id(self, encryption_key_id):
        """Sets the encryption_key_id of this V1pre3DirectUploadInformation.


        :param encryption_key_id: The encryption_key_id of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._encryption_key_id = encryption_key_id

    @property
    def encryption_method(self):
        """Gets the encryption_method of this V1pre3DirectUploadInformation.  # noqa: E501


        :return: The encryption_method of this V1pre3DirectUploadInformation.  # noqa: E501
        :rtype: str
        """
        return self._encryption_method

    @encryption_method.setter
    def encryption_method(self, encryption_method):
        """Sets the encryption_method of this V1pre3DirectUploadInformation.


        :param encryption_method: The encryption_method of this V1pre3DirectUploadInformation.  # noqa: E501
        :type: str
        """

        self._encryption_method = encryption_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1pre3DirectUploadInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1pre3DirectUploadInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
