# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'date_last_active': 'datetime',
        'href_runs': 'str',
        'href_projects': 'str',
        'roles': 'list[str]',
        'storage_statistics': 'StorageStatistics',
        'features': 'list[str]',
        'logged_in_user': 'LoggedInUser',
        'href_history': 'str',
        'href_domain': 'str',
        'is_workgroup': 'bool',
        'is_public_domain_user': 'bool',
        'role_permissions': 'list[str]',
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'date_created': 'datetime',
        'gravatar_url': 'str',
        'href_properties': 'str',
        'domain_name': 'str',
        'external_domain_id': 'str',
        'platform_id': 'str'
    }

    attribute_map = {
        'email': 'Email',
        'date_last_active': 'DateLastActive',
        'href_runs': 'HrefRuns',
        'href_projects': 'HrefProjects',
        'roles': 'Roles',
        'storage_statistics': 'StorageStatistics',
        'features': 'Features',
        'logged_in_user': 'LoggedInUser',
        'href_history': 'HrefHistory',
        'href_domain': 'HrefDomain',
        'is_workgroup': 'IsWorkgroup',
        'is_public_domain_user': 'IsPublicDomainUser',
        'role_permissions': 'RolePermissions',
        'id': 'Id',
        'href': 'Href',
        'name': 'Name',
        'date_created': 'DateCreated',
        'gravatar_url': 'GravatarUrl',
        'href_properties': 'HrefProperties',
        'domain_name': 'DomainName',
        'external_domain_id': 'ExternalDomainId',
        'platform_id': 'PlatformId'
    }

    def __init__(self, email=None, date_last_active=None, href_runs=None, href_projects=None, roles=None, storage_statistics=None, features=None, logged_in_user=None, href_history=None, href_domain=None, is_workgroup=None, is_public_domain_user=None, role_permissions=None, id=None, href=None, name=None, date_created=None, gravatar_url=None, href_properties=None, domain_name=None, external_domain_id=None, platform_id=None):  # noqa: E501
        """V2User - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._date_last_active = None
        self._href_runs = None
        self._href_projects = None
        self._roles = None
        self._storage_statistics = None
        self._features = None
        self._logged_in_user = None
        self._href_history = None
        self._href_domain = None
        self._is_workgroup = None
        self._is_public_domain_user = None
        self._role_permissions = None
        self._id = None
        self._href = None
        self._name = None
        self._date_created = None
        self._gravatar_url = None
        self._href_properties = None
        self._domain_name = None
        self._external_domain_id = None
        self._platform_id = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if date_last_active is not None:
            self.date_last_active = date_last_active
        if href_runs is not None:
            self.href_runs = href_runs
        if href_projects is not None:
            self.href_projects = href_projects
        if roles is not None:
            self.roles = roles
        if storage_statistics is not None:
            self.storage_statistics = storage_statistics
        if features is not None:
            self.features = features
        if logged_in_user is not None:
            self.logged_in_user = logged_in_user
        if href_history is not None:
            self.href_history = href_history
        if href_domain is not None:
            self.href_domain = href_domain
        if is_workgroup is not None:
            self.is_workgroup = is_workgroup
        if is_public_domain_user is not None:
            self.is_public_domain_user = is_public_domain_user
        if role_permissions is not None:
            self.role_permissions = role_permissions
        self.id = id
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if date_created is not None:
            self.date_created = date_created
        if gravatar_url is not None:
            self.gravatar_url = gravatar_url
        if href_properties is not None:
            self.href_properties = href_properties
        if domain_name is not None:
            self.domain_name = domain_name
        if external_domain_id is not None:
            self.external_domain_id = external_domain_id
        if platform_id is not None:
            self.platform_id = platform_id

    @property
    def email(self):
        """Gets the email of this V2User.  # noqa: E501


        :return: The email of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V2User.


        :param email: The email of this V2User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def date_last_active(self):
        """Gets the date_last_active of this V2User.  # noqa: E501


        :return: The date_last_active of this V2User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_active

    @date_last_active.setter
    def date_last_active(self, date_last_active):
        """Sets the date_last_active of this V2User.


        :param date_last_active: The date_last_active of this V2User.  # noqa: E501
        :type: datetime
        """

        self._date_last_active = date_last_active

    @property
    def href_runs(self):
        """Gets the href_runs of this V2User.  # noqa: E501


        :return: The href_runs of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href_runs

    @href_runs.setter
    def href_runs(self, href_runs):
        """Sets the href_runs of this V2User.


        :param href_runs: The href_runs of this V2User.  # noqa: E501
        :type: str
        """

        self._href_runs = href_runs

    @property
    def href_projects(self):
        """Gets the href_projects of this V2User.  # noqa: E501


        :return: The href_projects of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href_projects

    @href_projects.setter
    def href_projects(self, href_projects):
        """Sets the href_projects of this V2User.


        :param href_projects: The href_projects of this V2User.  # noqa: E501
        :type: str
        """

        self._href_projects = href_projects

    @property
    def roles(self):
        """Gets the roles of this V2User.  # noqa: E501


        :return: The roles of this V2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this V2User.


        :param roles: The roles of this V2User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def storage_statistics(self):
        """Gets the storage_statistics of this V2User.  # noqa: E501


        :return: The storage_statistics of this V2User.  # noqa: E501
        :rtype: StorageStatistics
        """
        return self._storage_statistics

    @storage_statistics.setter
    def storage_statistics(self, storage_statistics):
        """Sets the storage_statistics of this V2User.


        :param storage_statistics: The storage_statistics of this V2User.  # noqa: E501
        :type: StorageStatistics
        """

        self._storage_statistics = storage_statistics

    @property
    def features(self):
        """Gets the features of this V2User.  # noqa: E501


        :return: The features of this V2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V2User.


        :param features: The features of this V2User.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def logged_in_user(self):
        """Gets the logged_in_user of this V2User.  # noqa: E501


        :return: The logged_in_user of this V2User.  # noqa: E501
        :rtype: LoggedInUser
        """
        return self._logged_in_user

    @logged_in_user.setter
    def logged_in_user(self, logged_in_user):
        """Sets the logged_in_user of this V2User.


        :param logged_in_user: The logged_in_user of this V2User.  # noqa: E501
        :type: LoggedInUser
        """

        self._logged_in_user = logged_in_user

    @property
    def href_history(self):
        """Gets the href_history of this V2User.  # noqa: E501


        :return: The href_history of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href_history

    @href_history.setter
    def href_history(self, href_history):
        """Sets the href_history of this V2User.


        :param href_history: The href_history of this V2User.  # noqa: E501
        :type: str
        """

        self._href_history = href_history

    @property
    def href_domain(self):
        """Gets the href_domain of this V2User.  # noqa: E501


        :return: The href_domain of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href_domain

    @href_domain.setter
    def href_domain(self, href_domain):
        """Sets the href_domain of this V2User.


        :param href_domain: The href_domain of this V2User.  # noqa: E501
        :type: str
        """

        self._href_domain = href_domain

    @property
    def is_workgroup(self):
        """Gets the is_workgroup of this V2User.  # noqa: E501


        :return: The is_workgroup of this V2User.  # noqa: E501
        :rtype: bool
        """
        return self._is_workgroup

    @is_workgroup.setter
    def is_workgroup(self, is_workgroup):
        """Sets the is_workgroup of this V2User.


        :param is_workgroup: The is_workgroup of this V2User.  # noqa: E501
        :type: bool
        """

        self._is_workgroup = is_workgroup

    @property
    def is_public_domain_user(self):
        """Gets the is_public_domain_user of this V2User.  # noqa: E501


        :return: The is_public_domain_user of this V2User.  # noqa: E501
        :rtype: bool
        """
        return self._is_public_domain_user

    @is_public_domain_user.setter
    def is_public_domain_user(self, is_public_domain_user):
        """Sets the is_public_domain_user of this V2User.


        :param is_public_domain_user: The is_public_domain_user of this V2User.  # noqa: E501
        :type: bool
        """

        self._is_public_domain_user = is_public_domain_user

    @property
    def role_permissions(self):
        """Gets the role_permissions of this V2User.  # noqa: E501


        :return: The role_permissions of this V2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_permissions

    @role_permissions.setter
    def role_permissions(self, role_permissions):
        """Sets the role_permissions of this V2User.


        :param role_permissions: The role_permissions of this V2User.  # noqa: E501
        :type: list[str]
        """

        self._role_permissions = role_permissions

    @property
    def id(self):
        """Gets the id of this V2User.  # noqa: E501


        :return: The id of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2User.


        :param id: The id of this V2User.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2User.  # noqa: E501


        :return: The href of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2User.


        :param href: The href of this V2User.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this V2User.  # noqa: E501


        :return: The name of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2User.


        :param name: The name of this V2User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def date_created(self):
        """Gets the date_created of this V2User.  # noqa: E501


        :return: The date_created of this V2User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2User.


        :param date_created: The date_created of this V2User.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def gravatar_url(self):
        """Gets the gravatar_url of this V2User.  # noqa: E501


        :return: The gravatar_url of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_url

    @gravatar_url.setter
    def gravatar_url(self, gravatar_url):
        """Sets the gravatar_url of this V2User.


        :param gravatar_url: The gravatar_url of this V2User.  # noqa: E501
        :type: str
        """

        self._gravatar_url = gravatar_url

    @property
    def href_properties(self):
        """Gets the href_properties of this V2User.  # noqa: E501


        :return: The href_properties of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._href_properties

    @href_properties.setter
    def href_properties(self, href_properties):
        """Sets the href_properties of this V2User.


        :param href_properties: The href_properties of this V2User.  # noqa: E501
        :type: str
        """

        self._href_properties = href_properties

    @property
    def domain_name(self):
        """Gets the domain_name of this V2User.  # noqa: E501


        :return: The domain_name of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this V2User.


        :param domain_name: The domain_name of this V2User.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def external_domain_id(self):
        """Gets the external_domain_id of this V2User.  # noqa: E501


        :return: The external_domain_id of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._external_domain_id

    @external_domain_id.setter
    def external_domain_id(self, external_domain_id):
        """Sets the external_domain_id of this V2User.


        :param external_domain_id: The external_domain_id of this V2User.  # noqa: E501
        :type: str
        """

        self._external_domain_id = external_domain_id

    @property
    def platform_id(self):
        """Gets the platform_id of this V2User.  # noqa: E501


        :return: The platform_id of this V2User.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this V2User.


        :param platform_id: The platform_id of this V2User.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
