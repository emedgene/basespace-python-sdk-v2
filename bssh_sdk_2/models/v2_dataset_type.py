# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2DatasetType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'href_docs': 'str',
        'description_markdown': 'str',
        'user_created_by': 'V1pre3UserCompact',
        'attribute_schema': 'V2DatasetTypeAttributeSchema',
        'conforms_to': 'list[V2DatasetTypeCompact]',
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'conforms_to_ids': 'list[str]'
    }

    attribute_map = {
        'namespace': 'Namespace',
        'href_docs': 'HrefDocs',
        'description_markdown': 'DescriptionMarkdown',
        'user_created_by': 'UserCreatedBy',
        'attribute_schema': 'AttributeSchema',
        'conforms_to': 'ConformsTo',
        'id': 'Id',
        'href': 'Href',
        'name': 'Name',
        'conforms_to_ids': 'ConformsToIds'
    }

    def __init__(self, namespace=None, href_docs=None, description_markdown=None, user_created_by=None, attribute_schema=None, conforms_to=None, id=None, href=None, name=None, conforms_to_ids=None):  # noqa: E501
        """V2DatasetType - a model defined in Swagger"""  # noqa: E501
        self._namespace = None
        self._href_docs = None
        self._description_markdown = None
        self._user_created_by = None
        self._attribute_schema = None
        self._conforms_to = None
        self._id = None
        self._href = None
        self._name = None
        self._conforms_to_ids = None
        self.discriminator = None
        self.namespace = namespace
        self.href_docs = href_docs
        self.description_markdown = description_markdown
        self.user_created_by = user_created_by
        self.attribute_schema = attribute_schema
        self.conforms_to = conforms_to
        self.id = id
        self.href = href
        self.name = name
        self.conforms_to_ids = conforms_to_ids

    @property
    def namespace(self):
        """Gets the namespace of this V2DatasetType.  # noqa: E501


        :return: The namespace of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V2DatasetType.


        :param namespace: The namespace of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def href_docs(self):
        """Gets the href_docs of this V2DatasetType.  # noqa: E501


        :return: The href_docs of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._href_docs

    @href_docs.setter
    def href_docs(self, href_docs):
        """Sets the href_docs of this V2DatasetType.


        :param href_docs: The href_docs of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if href_docs is None:
            raise ValueError("Invalid value for `href_docs`, must not be `None`")  # noqa: E501

        self._href_docs = href_docs

    @property
    def description_markdown(self):
        """Gets the description_markdown of this V2DatasetType.  # noqa: E501


        :return: The description_markdown of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._description_markdown

    @description_markdown.setter
    def description_markdown(self, description_markdown):
        """Sets the description_markdown of this V2DatasetType.


        :param description_markdown: The description_markdown of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if description_markdown is None:
            raise ValueError("Invalid value for `description_markdown`, must not be `None`")  # noqa: E501

        self._description_markdown = description_markdown

    @property
    def user_created_by(self):
        """Gets the user_created_by of this V2DatasetType.  # noqa: E501


        :return: The user_created_by of this V2DatasetType.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_created_by

    @user_created_by.setter
    def user_created_by(self, user_created_by):
        """Sets the user_created_by of this V2DatasetType.


        :param user_created_by: The user_created_by of this V2DatasetType.  # noqa: E501
        :type: V1pre3UserCompact
        """
        if user_created_by is None:
            raise ValueError("Invalid value for `user_created_by`, must not be `None`")  # noqa: E501

        self._user_created_by = user_created_by

    @property
    def attribute_schema(self):
        """Gets the attribute_schema of this V2DatasetType.  # noqa: E501


        :return: The attribute_schema of this V2DatasetType.  # noqa: E501
        :rtype: V2DatasetTypeAttributeSchema
        """
        return self._attribute_schema

    @attribute_schema.setter
    def attribute_schema(self, attribute_schema):
        """Sets the attribute_schema of this V2DatasetType.


        :param attribute_schema: The attribute_schema of this V2DatasetType.  # noqa: E501
        :type: V2DatasetTypeAttributeSchema
        """
        if attribute_schema is None:
            raise ValueError("Invalid value for `attribute_schema`, must not be `None`")  # noqa: E501

        self._attribute_schema = attribute_schema

    @property
    def conforms_to(self):
        """Gets the conforms_to of this V2DatasetType.  # noqa: E501


        :return: The conforms_to of this V2DatasetType.  # noqa: E501
        :rtype: list[V2DatasetTypeCompact]
        """
        return self._conforms_to

    @conforms_to.setter
    def conforms_to(self, conforms_to):
        """Sets the conforms_to of this V2DatasetType.


        :param conforms_to: The conforms_to of this V2DatasetType.  # noqa: E501
        :type: list[V2DatasetTypeCompact]
        """
        if conforms_to is None:
            raise ValueError("Invalid value for `conforms_to`, must not be `None`")  # noqa: E501

        self._conforms_to = conforms_to

    @property
    def id(self):
        """Gets the id of this V2DatasetType.  # noqa: E501


        :return: The id of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2DatasetType.


        :param id: The id of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2DatasetType.  # noqa: E501


        :return: The href of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2DatasetType.


        :param href: The href of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def name(self):
        """Gets the name of this V2DatasetType.  # noqa: E501


        :return: The name of this V2DatasetType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2DatasetType.


        :param name: The name of this V2DatasetType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def conforms_to_ids(self):
        """Gets the conforms_to_ids of this V2DatasetType.  # noqa: E501


        :return: The conforms_to_ids of this V2DatasetType.  # noqa: E501
        :rtype: list[str]
        """
        return self._conforms_to_ids

    @conforms_to_ids.setter
    def conforms_to_ids(self, conforms_to_ids):
        """Sets the conforms_to_ids of this V2DatasetType.


        :param conforms_to_ids: The conforms_to_ids of this V2DatasetType.  # noqa: E501
        :type: list[str]
        """
        if conforms_to_ids is None:
            raise ValueError("Invalid value for `conforms_to_ids`, must not be `None`")  # noqa: E501

        self._conforms_to_ids = conforms_to_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2DatasetType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2DatasetType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
