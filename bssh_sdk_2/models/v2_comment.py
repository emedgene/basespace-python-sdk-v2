# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'user': 'V1pre3UserCompact',
        'body': 'str',
        'action': 'str',
        'href_application': 'str',
        'prior_value': 'str',
        'new_value': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'user': 'User',
        'body': 'Body',
        'action': 'Action',
        'href_application': 'HrefApplication',
        'prior_value': 'PriorValue',
        'new_value': 'NewValue',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, id=None, href=None, user=None, body=None, action=None, href_application=None, prior_value=None, new_value=None, date_created=None, date_modified=None):  # noqa: E501
        """V2Comment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._user = None
        self._body = None
        self._action = None
        self._href_application = None
        self._prior_value = None
        self._new_value = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if user is not None:
            self.user = user
        if body is not None:
            self.body = body
        if action is not None:
            self.action = action
        if href_application is not None:
            self.href_application = href_application
        if prior_value is not None:
            self.prior_value = prior_value
        if new_value is not None:
            self.new_value = new_value
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def id(self):
        """Gets the id of this V2Comment.  # noqa: E501


        :return: The id of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2Comment.


        :param id: The id of this V2Comment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2Comment.  # noqa: E501


        :return: The href of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2Comment.


        :param href: The href of this V2Comment.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def user(self):
        """Gets the user of this V2Comment.  # noqa: E501


        :return: The user of this V2Comment.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2Comment.


        :param user: The user of this V2Comment.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user = user

    @property
    def body(self):
        """Gets the body of this V2Comment.  # noqa: E501


        :return: The body of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this V2Comment.


        :param body: The body of this V2Comment.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def action(self):
        """Gets the action of this V2Comment.  # noqa: E501


        :return: The action of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this V2Comment.


        :param action: The action of this V2Comment.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def href_application(self):
        """Gets the href_application of this V2Comment.  # noqa: E501


        :return: The href_application of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._href_application

    @href_application.setter
    def href_application(self, href_application):
        """Sets the href_application of this V2Comment.


        :param href_application: The href_application of this V2Comment.  # noqa: E501
        :type: str
        """

        self._href_application = href_application

    @property
    def prior_value(self):
        """Gets the prior_value of this V2Comment.  # noqa: E501


        :return: The prior_value of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._prior_value

    @prior_value.setter
    def prior_value(self, prior_value):
        """Sets the prior_value of this V2Comment.


        :param prior_value: The prior_value of this V2Comment.  # noqa: E501
        :type: str
        """

        self._prior_value = prior_value

    @property
    def new_value(self):
        """Gets the new_value of this V2Comment.  # noqa: E501


        :return: The new_value of this V2Comment.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this V2Comment.


        :param new_value: The new_value of this V2Comment.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def date_created(self):
        """Gets the date_created of this V2Comment.  # noqa: E501


        :return: The date_created of this V2Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2Comment.


        :param date_created: The date_created of this V2Comment.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V2Comment.  # noqa: E501


        :return: The date_modified of this V2Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V2Comment.


        :param date_modified: The date_modified of this V2Comment.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
