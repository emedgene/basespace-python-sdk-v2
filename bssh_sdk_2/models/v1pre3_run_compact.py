# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1pre3RunCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'number': 'int',
        'experiment_name': 'str',
        'status': 'str',
        'reagent_barcode': 'str',
        'flowcell_barcode': 'str',
        'buffer_barcode': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'aggregate_run_state': 'str',
        'user_owned_by': 'V1pre3UserCompact',
        'user_uploaded_by': 'V1pre3UserCompact',
        'user_locked_by': 'V1pre3UserCompact',
        'instrument_locked_by': 'RegisteredInstrumentCompact',
        'total_size': 'int',
        'platform_name': 'str',
        'workflow': 'str',
        'instrument': 'RegisteredInstrumentCompact',
        'instrument_name': 'str',
        'instrument_type': 'str',
        'num_cycles_read1': 'int',
        'num_cycles_read2': 'int',
        'num_cycles_index1': 'int',
        'num_cycles_index2': 'int',
        'href_base_space_ui': 'str',
        'has_collaborators': 'bool',
        'is_transfer_pending': 'bool',
        'is_transfer_in_progress': 'bool',
        'is_deleted': 'bool',
        'is_archived': 'bool',
        'is_zipping': 'bool',
        'is_zipped': 'bool',
        'is_unzipping': 'bool',
        'is_file_data_deleted': 'bool',
        'sequencing_stats': 'SequencingStatsCompact',
        'prep_settings': 'PrepSettings',
        'expected_instrument_completion_date': 'datetime',
        'prep_error_code': 'str',
        'analysis_settings': 'AnalysisSettings',
        'lane_and_qc_status': 'str',
        'lims_status': 'str',
        'side': 'str',
        'date_instrument_started': 'datetime',
        'date_instrument_completed': 'datetime',
        'sample_sheet_name': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'name': 'Name',
        'number': 'Number',
        'experiment_name': 'ExperimentName',
        'status': 'Status',
        'reagent_barcode': 'ReagentBarcode',
        'flowcell_barcode': 'FlowcellBarcode',
        'buffer_barcode': 'BufferBarcode',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'aggregate_run_state': 'AggregateRunState',
        'user_owned_by': 'UserOwnedBy',
        'user_uploaded_by': 'UserUploadedBy',
        'user_locked_by': 'UserLockedBy',
        'instrument_locked_by': 'InstrumentLockedBy',
        'total_size': 'TotalSize',
        'platform_name': 'PlatformName',
        'workflow': 'Workflow',
        'instrument': 'Instrument',
        'instrument_name': 'InstrumentName',
        'instrument_type': 'InstrumentType',
        'num_cycles_read1': 'NumCyclesRead1',
        'num_cycles_read2': 'NumCyclesRead2',
        'num_cycles_index1': 'NumCyclesIndex1',
        'num_cycles_index2': 'NumCyclesIndex2',
        'href_base_space_ui': 'HrefBaseSpaceUI',
        'has_collaborators': 'HasCollaborators',
        'is_transfer_pending': 'IsTransferPending',
        'is_transfer_in_progress': 'IsTransferInProgress',
        'is_deleted': 'IsDeleted',
        'is_archived': 'IsArchived',
        'is_zipping': 'IsZipping',
        'is_zipped': 'IsZipped',
        'is_unzipping': 'IsUnzipping',
        'is_file_data_deleted': 'IsFileDataDeleted',
        'sequencing_stats': 'SequencingStats',
        'prep_settings': 'PrepSettings',
        'expected_instrument_completion_date': 'ExpectedInstrumentCompletionDate',
        'prep_error_code': 'PrepErrorCode',
        'analysis_settings': 'AnalysisSettings',
        'lane_and_qc_status': 'LaneAndQcStatus',
        'lims_status': 'LimsStatus',
        'side': 'Side',
        'date_instrument_started': 'DateInstrumentStarted',
        'date_instrument_completed': 'DateInstrumentCompleted',
        'sample_sheet_name': 'SampleSheetName'
    }

    def __init__(self, id=None, href=None, name=None, number=None, experiment_name=None, status=None, reagent_barcode=None, flowcell_barcode=None, buffer_barcode=None, date_created=None, date_modified=None, aggregate_run_state=None, user_owned_by=None, user_uploaded_by=None, user_locked_by=None, instrument_locked_by=None, total_size=None, platform_name=None, workflow=None, instrument=None, instrument_name=None, instrument_type=None, num_cycles_read1=None, num_cycles_read2=None, num_cycles_index1=None, num_cycles_index2=None, href_base_space_ui=None, has_collaborators=None, is_transfer_pending=None, is_transfer_in_progress=None, is_deleted=None, is_archived=None, is_zipping=None, is_zipped=None, is_unzipping=None, is_file_data_deleted=None, sequencing_stats=None, prep_settings=None, expected_instrument_completion_date=None, prep_error_code=None, analysis_settings=None, lane_and_qc_status=None, lims_status=None, side=None, date_instrument_started=None, date_instrument_completed=None, sample_sheet_name=None):  # noqa: E501
        """V1pre3RunCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._number = None
        self._experiment_name = None
        self._status = None
        self._reagent_barcode = None
        self._flowcell_barcode = None
        self._buffer_barcode = None
        self._date_created = None
        self._date_modified = None
        self._aggregate_run_state = None
        self._user_owned_by = None
        self._user_uploaded_by = None
        self._user_locked_by = None
        self._instrument_locked_by = None
        self._total_size = None
        self._platform_name = None
        self._workflow = None
        self._instrument = None
        self._instrument_name = None
        self._instrument_type = None
        self._num_cycles_read1 = None
        self._num_cycles_read2 = None
        self._num_cycles_index1 = None
        self._num_cycles_index2 = None
        self._href_base_space_ui = None
        self._has_collaborators = None
        self._is_transfer_pending = None
        self._is_transfer_in_progress = None
        self._is_deleted = None
        self._is_archived = None
        self._is_zipping = None
        self._is_zipped = None
        self._is_unzipping = None
        self._is_file_data_deleted = None
        self._sequencing_stats = None
        self._prep_settings = None
        self._expected_instrument_completion_date = None
        self._prep_error_code = None
        self._analysis_settings = None
        self._lane_and_qc_status = None
        self._lims_status = None
        self._side = None
        self._date_instrument_started = None
        self._date_instrument_completed = None
        self._sample_sheet_name = None
        self.discriminator = None
        self.id = id
        self.href = href
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if experiment_name is not None:
            self.experiment_name = experiment_name
        if status is not None:
            self.status = status
        if reagent_barcode is not None:
            self.reagent_barcode = reagent_barcode
        if flowcell_barcode is not None:
            self.flowcell_barcode = flowcell_barcode
        if buffer_barcode is not None:
            self.buffer_barcode = buffer_barcode
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if aggregate_run_state is not None:
            self.aggregate_run_state = aggregate_run_state
        if user_owned_by is not None:
            self.user_owned_by = user_owned_by
        if user_uploaded_by is not None:
            self.user_uploaded_by = user_uploaded_by
        if user_locked_by is not None:
            self.user_locked_by = user_locked_by
        if instrument_locked_by is not None:
            self.instrument_locked_by = instrument_locked_by
        if total_size is not None:
            self.total_size = total_size
        if platform_name is not None:
            self.platform_name = platform_name
        if workflow is not None:
            self.workflow = workflow
        if instrument is not None:
            self.instrument = instrument
        if instrument_name is not None:
            self.instrument_name = instrument_name
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if num_cycles_read1 is not None:
            self.num_cycles_read1 = num_cycles_read1
        if num_cycles_read2 is not None:
            self.num_cycles_read2 = num_cycles_read2
        if num_cycles_index1 is not None:
            self.num_cycles_index1 = num_cycles_index1
        if num_cycles_index2 is not None:
            self.num_cycles_index2 = num_cycles_index2
        if href_base_space_ui is not None:
            self.href_base_space_ui = href_base_space_ui
        if has_collaborators is not None:
            self.has_collaborators = has_collaborators
        if is_transfer_pending is not None:
            self.is_transfer_pending = is_transfer_pending
        if is_transfer_in_progress is not None:
            self.is_transfer_in_progress = is_transfer_in_progress
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_archived is not None:
            self.is_archived = is_archived
        if is_zipping is not None:
            self.is_zipping = is_zipping
        if is_zipped is not None:
            self.is_zipped = is_zipped
        if is_unzipping is not None:
            self.is_unzipping = is_unzipping
        if is_file_data_deleted is not None:
            self.is_file_data_deleted = is_file_data_deleted
        if sequencing_stats is not None:
            self.sequencing_stats = sequencing_stats
        if prep_settings is not None:
            self.prep_settings = prep_settings
        if expected_instrument_completion_date is not None:
            self.expected_instrument_completion_date = expected_instrument_completion_date
        if prep_error_code is not None:
            self.prep_error_code = prep_error_code
        if analysis_settings is not None:
            self.analysis_settings = analysis_settings
        if lane_and_qc_status is not None:
            self.lane_and_qc_status = lane_and_qc_status
        if lims_status is not None:
            self.lims_status = lims_status
        if side is not None:
            self.side = side
        if date_instrument_started is not None:
            self.date_instrument_started = date_instrument_started
        if date_instrument_completed is not None:
            self.date_instrument_completed = date_instrument_completed
        if sample_sheet_name is not None:
            self.sample_sheet_name = sample_sheet_name

    @property
    def id(self):
        """Gets the id of this V1pre3RunCompact.  # noqa: E501


        :return: The id of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1pre3RunCompact.


        :param id: The id of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V1pre3RunCompact.  # noqa: E501


        :return: The href of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V1pre3RunCompact.


        :param href: The href of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def name(self):
        """Gets the name of this V1pre3RunCompact.  # noqa: E501


        :return: The name of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1pre3RunCompact.


        :param name: The name of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this V1pre3RunCompact.  # noqa: E501


        :return: The number of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this V1pre3RunCompact.


        :param number: The number of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def experiment_name(self):
        """Gets the experiment_name of this V1pre3RunCompact.  # noqa: E501


        :return: The experiment_name of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this V1pre3RunCompact.


        :param experiment_name: The experiment_name of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._experiment_name = experiment_name

    @property
    def status(self):
        """Gets the status of this V1pre3RunCompact.  # noqa: E501


        :return: The status of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1pre3RunCompact.


        :param status: The status of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reagent_barcode(self):
        """Gets the reagent_barcode of this V1pre3RunCompact.  # noqa: E501


        :return: The reagent_barcode of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._reagent_barcode

    @reagent_barcode.setter
    def reagent_barcode(self, reagent_barcode):
        """Sets the reagent_barcode of this V1pre3RunCompact.


        :param reagent_barcode: The reagent_barcode of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._reagent_barcode = reagent_barcode

    @property
    def flowcell_barcode(self):
        """Gets the flowcell_barcode of this V1pre3RunCompact.  # noqa: E501


        :return: The flowcell_barcode of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._flowcell_barcode

    @flowcell_barcode.setter
    def flowcell_barcode(self, flowcell_barcode):
        """Sets the flowcell_barcode of this V1pre3RunCompact.


        :param flowcell_barcode: The flowcell_barcode of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._flowcell_barcode = flowcell_barcode

    @property
    def buffer_barcode(self):
        """Gets the buffer_barcode of this V1pre3RunCompact.  # noqa: E501


        :return: The buffer_barcode of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._buffer_barcode

    @buffer_barcode.setter
    def buffer_barcode(self, buffer_barcode):
        """Sets the buffer_barcode of this V1pre3RunCompact.


        :param buffer_barcode: The buffer_barcode of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._buffer_barcode = buffer_barcode

    @property
    def date_created(self):
        """Gets the date_created of this V1pre3RunCompact.  # noqa: E501


        :return: The date_created of this V1pre3RunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V1pre3RunCompact.


        :param date_created: The date_created of this V1pre3RunCompact.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V1pre3RunCompact.  # noqa: E501


        :return: The date_modified of this V1pre3RunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V1pre3RunCompact.


        :param date_modified: The date_modified of this V1pre3RunCompact.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def aggregate_run_state(self):
        """Gets the aggregate_run_state of this V1pre3RunCompact.  # noqa: E501


        :return: The aggregate_run_state of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_run_state

    @aggregate_run_state.setter
    def aggregate_run_state(self, aggregate_run_state):
        """Sets the aggregate_run_state of this V1pre3RunCompact.


        :param aggregate_run_state: The aggregate_run_state of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._aggregate_run_state = aggregate_run_state

    @property
    def user_owned_by(self):
        """Gets the user_owned_by of this V1pre3RunCompact.  # noqa: E501


        :return: The user_owned_by of this V1pre3RunCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_owned_by

    @user_owned_by.setter
    def user_owned_by(self, user_owned_by):
        """Sets the user_owned_by of this V1pre3RunCompact.


        :param user_owned_by: The user_owned_by of this V1pre3RunCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_owned_by = user_owned_by

    @property
    def user_uploaded_by(self):
        """Gets the user_uploaded_by of this V1pre3RunCompact.  # noqa: E501


        :return: The user_uploaded_by of this V1pre3RunCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_uploaded_by

    @user_uploaded_by.setter
    def user_uploaded_by(self, user_uploaded_by):
        """Sets the user_uploaded_by of this V1pre3RunCompact.


        :param user_uploaded_by: The user_uploaded_by of this V1pre3RunCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_uploaded_by = user_uploaded_by

    @property
    def user_locked_by(self):
        """Gets the user_locked_by of this V1pre3RunCompact.  # noqa: E501


        :return: The user_locked_by of this V1pre3RunCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_locked_by

    @user_locked_by.setter
    def user_locked_by(self, user_locked_by):
        """Sets the user_locked_by of this V1pre3RunCompact.


        :param user_locked_by: The user_locked_by of this V1pre3RunCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_locked_by = user_locked_by

    @property
    def instrument_locked_by(self):
        """Gets the instrument_locked_by of this V1pre3RunCompact.  # noqa: E501


        :return: The instrument_locked_by of this V1pre3RunCompact.  # noqa: E501
        :rtype: RegisteredInstrumentCompact
        """
        return self._instrument_locked_by

    @instrument_locked_by.setter
    def instrument_locked_by(self, instrument_locked_by):
        """Sets the instrument_locked_by of this V1pre3RunCompact.


        :param instrument_locked_by: The instrument_locked_by of this V1pre3RunCompact.  # noqa: E501
        :type: RegisteredInstrumentCompact
        """

        self._instrument_locked_by = instrument_locked_by

    @property
    def total_size(self):
        """Gets the total_size of this V1pre3RunCompact.  # noqa: E501


        :return: The total_size of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this V1pre3RunCompact.


        :param total_size: The total_size of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def platform_name(self):
        """Gets the platform_name of this V1pre3RunCompact.  # noqa: E501


        :return: The platform_name of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this V1pre3RunCompact.


        :param platform_name: The platform_name of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._platform_name = platform_name

    @property
    def workflow(self):
        """Gets the workflow of this V1pre3RunCompact.  # noqa: E501


        :return: The workflow of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this V1pre3RunCompact.


        :param workflow: The workflow of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._workflow = workflow

    @property
    def instrument(self):
        """Gets the instrument of this V1pre3RunCompact.  # noqa: E501


        :return: The instrument of this V1pre3RunCompact.  # noqa: E501
        :rtype: RegisteredInstrumentCompact
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this V1pre3RunCompact.


        :param instrument: The instrument of this V1pre3RunCompact.  # noqa: E501
        :type: RegisteredInstrumentCompact
        """

        self._instrument = instrument

    @property
    def instrument_name(self):
        """Gets the instrument_name of this V1pre3RunCompact.  # noqa: E501


        :return: The instrument_name of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_name

    @instrument_name.setter
    def instrument_name(self, instrument_name):
        """Sets the instrument_name of this V1pre3RunCompact.


        :param instrument_name: The instrument_name of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_name = instrument_name

    @property
    def instrument_type(self):
        """Gets the instrument_type of this V1pre3RunCompact.  # noqa: E501


        :return: The instrument_type of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this V1pre3RunCompact.


        :param instrument_type: The instrument_type of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def num_cycles_read1(self):
        """Gets the num_cycles_read1 of this V1pre3RunCompact.  # noqa: E501


        :return: The num_cycles_read1 of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read1

    @num_cycles_read1.setter
    def num_cycles_read1(self, num_cycles_read1):
        """Sets the num_cycles_read1 of this V1pre3RunCompact.


        :param num_cycles_read1: The num_cycles_read1 of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._num_cycles_read1 = num_cycles_read1

    @property
    def num_cycles_read2(self):
        """Gets the num_cycles_read2 of this V1pre3RunCompact.  # noqa: E501


        :return: The num_cycles_read2 of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read2

    @num_cycles_read2.setter
    def num_cycles_read2(self, num_cycles_read2):
        """Sets the num_cycles_read2 of this V1pre3RunCompact.


        :param num_cycles_read2: The num_cycles_read2 of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._num_cycles_read2 = num_cycles_read2

    @property
    def num_cycles_index1(self):
        """Gets the num_cycles_index1 of this V1pre3RunCompact.  # noqa: E501


        :return: The num_cycles_index1 of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index1

    @num_cycles_index1.setter
    def num_cycles_index1(self, num_cycles_index1):
        """Sets the num_cycles_index1 of this V1pre3RunCompact.


        :param num_cycles_index1: The num_cycles_index1 of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._num_cycles_index1 = num_cycles_index1

    @property
    def num_cycles_index2(self):
        """Gets the num_cycles_index2 of this V1pre3RunCompact.  # noqa: E501


        :return: The num_cycles_index2 of this V1pre3RunCompact.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index2

    @num_cycles_index2.setter
    def num_cycles_index2(self, num_cycles_index2):
        """Sets the num_cycles_index2 of this V1pre3RunCompact.


        :param num_cycles_index2: The num_cycles_index2 of this V1pre3RunCompact.  # noqa: E501
        :type: int
        """

        self._num_cycles_index2 = num_cycles_index2

    @property
    def href_base_space_ui(self):
        """Gets the href_base_space_ui of this V1pre3RunCompact.  # noqa: E501


        :return: The href_base_space_ui of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_base_space_ui

    @href_base_space_ui.setter
    def href_base_space_ui(self, href_base_space_ui):
        """Sets the href_base_space_ui of this V1pre3RunCompact.


        :param href_base_space_ui: The href_base_space_ui of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._href_base_space_ui = href_base_space_ui

    @property
    def has_collaborators(self):
        """Gets the has_collaborators of this V1pre3RunCompact.  # noqa: E501


        :return: The has_collaborators of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._has_collaborators

    @has_collaborators.setter
    def has_collaborators(self, has_collaborators):
        """Sets the has_collaborators of this V1pre3RunCompact.


        :param has_collaborators: The has_collaborators of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._has_collaborators = has_collaborators

    @property
    def is_transfer_pending(self):
        """Gets the is_transfer_pending of this V1pre3RunCompact.  # noqa: E501


        :return: The is_transfer_pending of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfer_pending

    @is_transfer_pending.setter
    def is_transfer_pending(self, is_transfer_pending):
        """Sets the is_transfer_pending of this V1pre3RunCompact.


        :param is_transfer_pending: The is_transfer_pending of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_transfer_pending = is_transfer_pending

    @property
    def is_transfer_in_progress(self):
        """Gets the is_transfer_in_progress of this V1pre3RunCompact.  # noqa: E501


        :return: The is_transfer_in_progress of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfer_in_progress

    @is_transfer_in_progress.setter
    def is_transfer_in_progress(self, is_transfer_in_progress):
        """Sets the is_transfer_in_progress of this V1pre3RunCompact.


        :param is_transfer_in_progress: The is_transfer_in_progress of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_transfer_in_progress = is_transfer_in_progress

    @property
    def is_deleted(self):
        """Gets the is_deleted of this V1pre3RunCompact.  # noqa: E501


        :return: The is_deleted of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this V1pre3RunCompact.


        :param is_deleted: The is_deleted of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_archived(self):
        """Gets the is_archived of this V1pre3RunCompact.  # noqa: E501


        :return: The is_archived of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this V1pre3RunCompact.


        :param is_archived: The is_archived of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_zipping(self):
        """Gets the is_zipping of this V1pre3RunCompact.  # noqa: E501


        :return: The is_zipping of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_zipping

    @is_zipping.setter
    def is_zipping(self, is_zipping):
        """Sets the is_zipping of this V1pre3RunCompact.


        :param is_zipping: The is_zipping of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_zipping = is_zipping

    @property
    def is_zipped(self):
        """Gets the is_zipped of this V1pre3RunCompact.  # noqa: E501


        :return: The is_zipped of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_zipped

    @is_zipped.setter
    def is_zipped(self, is_zipped):
        """Sets the is_zipped of this V1pre3RunCompact.


        :param is_zipped: The is_zipped of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_zipped = is_zipped

    @property
    def is_unzipping(self):
        """Gets the is_unzipping of this V1pre3RunCompact.  # noqa: E501


        :return: The is_unzipping of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_unzipping

    @is_unzipping.setter
    def is_unzipping(self, is_unzipping):
        """Sets the is_unzipping of this V1pre3RunCompact.


        :param is_unzipping: The is_unzipping of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_unzipping = is_unzipping

    @property
    def is_file_data_deleted(self):
        """Gets the is_file_data_deleted of this V1pre3RunCompact.  # noqa: E501


        :return: The is_file_data_deleted of this V1pre3RunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_file_data_deleted

    @is_file_data_deleted.setter
    def is_file_data_deleted(self, is_file_data_deleted):
        """Sets the is_file_data_deleted of this V1pre3RunCompact.


        :param is_file_data_deleted: The is_file_data_deleted of this V1pre3RunCompact.  # noqa: E501
        :type: bool
        """

        self._is_file_data_deleted = is_file_data_deleted

    @property
    def sequencing_stats(self):
        """Gets the sequencing_stats of this V1pre3RunCompact.  # noqa: E501


        :return: The sequencing_stats of this V1pre3RunCompact.  # noqa: E501
        :rtype: SequencingStatsCompact
        """
        return self._sequencing_stats

    @sequencing_stats.setter
    def sequencing_stats(self, sequencing_stats):
        """Sets the sequencing_stats of this V1pre3RunCompact.


        :param sequencing_stats: The sequencing_stats of this V1pre3RunCompact.  # noqa: E501
        :type: SequencingStatsCompact
        """

        self._sequencing_stats = sequencing_stats

    @property
    def prep_settings(self):
        """Gets the prep_settings of this V1pre3RunCompact.  # noqa: E501


        :return: The prep_settings of this V1pre3RunCompact.  # noqa: E501
        :rtype: PrepSettings
        """
        return self._prep_settings

    @prep_settings.setter
    def prep_settings(self, prep_settings):
        """Sets the prep_settings of this V1pre3RunCompact.


        :param prep_settings: The prep_settings of this V1pre3RunCompact.  # noqa: E501
        :type: PrepSettings
        """

        self._prep_settings = prep_settings

    @property
    def expected_instrument_completion_date(self):
        """Gets the expected_instrument_completion_date of this V1pre3RunCompact.  # noqa: E501


        :return: The expected_instrument_completion_date of this V1pre3RunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_instrument_completion_date

    @expected_instrument_completion_date.setter
    def expected_instrument_completion_date(self, expected_instrument_completion_date):
        """Sets the expected_instrument_completion_date of this V1pre3RunCompact.


        :param expected_instrument_completion_date: The expected_instrument_completion_date of this V1pre3RunCompact.  # noqa: E501
        :type: datetime
        """

        self._expected_instrument_completion_date = expected_instrument_completion_date

    @property
    def prep_error_code(self):
        """Gets the prep_error_code of this V1pre3RunCompact.  # noqa: E501


        :return: The prep_error_code of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._prep_error_code

    @prep_error_code.setter
    def prep_error_code(self, prep_error_code):
        """Sets the prep_error_code of this V1pre3RunCompact.


        :param prep_error_code: The prep_error_code of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._prep_error_code = prep_error_code

    @property
    def analysis_settings(self):
        """Gets the analysis_settings of this V1pre3RunCompact.  # noqa: E501


        :return: The analysis_settings of this V1pre3RunCompact.  # noqa: E501
        :rtype: AnalysisSettings
        """
        return self._analysis_settings

    @analysis_settings.setter
    def analysis_settings(self, analysis_settings):
        """Sets the analysis_settings of this V1pre3RunCompact.


        :param analysis_settings: The analysis_settings of this V1pre3RunCompact.  # noqa: E501
        :type: AnalysisSettings
        """

        self._analysis_settings = analysis_settings

    @property
    def lane_and_qc_status(self):
        """Gets the lane_and_qc_status of this V1pre3RunCompact.  # noqa: E501


        :return: The lane_and_qc_status of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._lane_and_qc_status

    @lane_and_qc_status.setter
    def lane_and_qc_status(self, lane_and_qc_status):
        """Sets the lane_and_qc_status of this V1pre3RunCompact.


        :param lane_and_qc_status: The lane_and_qc_status of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._lane_and_qc_status = lane_and_qc_status

    @property
    def lims_status(self):
        """Gets the lims_status of this V1pre3RunCompact.  # noqa: E501


        :return: The lims_status of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._lims_status

    @lims_status.setter
    def lims_status(self, lims_status):
        """Sets the lims_status of this V1pre3RunCompact.


        :param lims_status: The lims_status of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._lims_status = lims_status

    @property
    def side(self):
        """Gets the side of this V1pre3RunCompact.  # noqa: E501


        :return: The side of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this V1pre3RunCompact.


        :param side: The side of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def date_instrument_started(self):
        """Gets the date_instrument_started of this V1pre3RunCompact.  # noqa: E501


        :return: The date_instrument_started of this V1pre3RunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_instrument_started

    @date_instrument_started.setter
    def date_instrument_started(self, date_instrument_started):
        """Sets the date_instrument_started of this V1pre3RunCompact.


        :param date_instrument_started: The date_instrument_started of this V1pre3RunCompact.  # noqa: E501
        :type: datetime
        """

        self._date_instrument_started = date_instrument_started

    @property
    def date_instrument_completed(self):
        """Gets the date_instrument_completed of this V1pre3RunCompact.  # noqa: E501


        :return: The date_instrument_completed of this V1pre3RunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_instrument_completed

    @date_instrument_completed.setter
    def date_instrument_completed(self, date_instrument_completed):
        """Sets the date_instrument_completed of this V1pre3RunCompact.


        :param date_instrument_completed: The date_instrument_completed of this V1pre3RunCompact.  # noqa: E501
        :type: datetime
        """

        self._date_instrument_completed = date_instrument_completed

    @property
    def sample_sheet_name(self):
        """Gets the sample_sheet_name of this V1pre3RunCompact.  # noqa: E501


        :return: The sample_sheet_name of this V1pre3RunCompact.  # noqa: E501
        :rtype: str
        """
        return self._sample_sheet_name

    @sample_sheet_name.setter
    def sample_sheet_name(self, sample_sheet_name):
        """Sets the sample_sheet_name of this V1pre3RunCompact.


        :param sample_sheet_name: The sample_sheet_name of this V1pre3RunCompact.  # noqa: E501
        :type: str
        """

        self._sample_sheet_name = sample_sheet_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1pre3RunCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1pre3RunCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
