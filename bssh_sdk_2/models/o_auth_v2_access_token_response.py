# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OAuthV2AccessTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'expires_in': 'int',
        'error': 'str',
        'error_description': 'str',
        'error_uri': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'expires_in': 'expires_in',
        'error': 'error',
        'error_description': 'error_description',
        'error_uri': 'error_uri'
    }

    def __init__(self, access_token=None, expires_in=None, error=None, error_description=None, error_uri=None):  # noqa: E501
        """OAuthV2AccessTokenResponse - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._expires_in = None
        self._error = None
        self._error_description = None
        self._error_uri = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if expires_in is not None:
            self.expires_in = expires_in
        if error is not None:
            self.error = error
        if error_description is not None:
            self.error_description = error_description
        if error_uri is not None:
            self.error_uri = error_uri

    @property
    def access_token(self):
        """Gets the access_token of this OAuthV2AccessTokenResponse.  # noqa: E501


        :return: The access_token of this OAuthV2AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OAuthV2AccessTokenResponse.


        :param access_token: The access_token of this OAuthV2AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this OAuthV2AccessTokenResponse.  # noqa: E501


        :return: The expires_in of this OAuthV2AccessTokenResponse.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this OAuthV2AccessTokenResponse.


        :param expires_in: The expires_in of this OAuthV2AccessTokenResponse.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def error(self):
        """Gets the error of this OAuthV2AccessTokenResponse.  # noqa: E501


        :return: The error of this OAuthV2AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this OAuthV2AccessTokenResponse.


        :param error: The error of this OAuthV2AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_description(self):
        """Gets the error_description of this OAuthV2AccessTokenResponse.  # noqa: E501


        :return: The error_description of this OAuthV2AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this OAuthV2AccessTokenResponse.


        :param error_description: The error_description of this OAuthV2AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def error_uri(self):
        """Gets the error_uri of this OAuthV2AccessTokenResponse.  # noqa: E501


        :return: The error_uri of this OAuthV2AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_uri

    @error_uri.setter
    def error_uri(self, error_uri):
        """Sets the error_uri of this OAuthV2AccessTokenResponse.


        :param error_uri: The error_uri of this OAuthV2AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._error_uri = error_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthV2AccessTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthV2AccessTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
