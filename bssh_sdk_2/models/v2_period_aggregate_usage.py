# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PeriodAggregateUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'aggregate_usages': 'list[V2AggregateUsage]'
    }

    attribute_map = {
        'name': 'Name',
        'start': 'Start',
        'end': 'End',
        'aggregate_usages': 'AggregateUsages'
    }

    def __init__(self, name=None, start=None, end=None, aggregate_usages=None):  # noqa: E501
        """V2PeriodAggregateUsage - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._start = None
        self._end = None
        self._aggregate_usages = None
        self.discriminator = None
        self.name = name
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        self.aggregate_usages = aggregate_usages

    @property
    def name(self):
        """Gets the name of this V2PeriodAggregateUsage.  # noqa: E501


        :return: The name of this V2PeriodAggregateUsage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2PeriodAggregateUsage.


        :param name: The name of this V2PeriodAggregateUsage.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start(self):
        """Gets the start of this V2PeriodAggregateUsage.  # noqa: E501


        :return: The start of this V2PeriodAggregateUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this V2PeriodAggregateUsage.


        :param start: The start of this V2PeriodAggregateUsage.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this V2PeriodAggregateUsage.  # noqa: E501


        :return: The end of this V2PeriodAggregateUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this V2PeriodAggregateUsage.


        :param end: The end of this V2PeriodAggregateUsage.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def aggregate_usages(self):
        """Gets the aggregate_usages of this V2PeriodAggregateUsage.  # noqa: E501


        :return: The aggregate_usages of this V2PeriodAggregateUsage.  # noqa: E501
        :rtype: list[V2AggregateUsage]
        """
        return self._aggregate_usages

    @aggregate_usages.setter
    def aggregate_usages(self, aggregate_usages):
        """Sets the aggregate_usages of this V2PeriodAggregateUsage.


        :param aggregate_usages: The aggregate_usages of this V2PeriodAggregateUsage.  # noqa: E501
        :type: list[V2AggregateUsage]
        """
        if aggregate_usages is None:
            raise ValueError("Invalid value for `aggregate_usages`, must not be `None`")  # noqa: E501

        self._aggregate_usages = aggregate_usages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PeriodAggregateUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PeriodAggregateUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
