# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2Workgroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'external_provider_id': 'str',
        'name': 'str',
        'domain_name': 'str',
        'is_collaborative': 'bool',
        'subscription': 'V2UserSubscription',
        'display_name': 'str',
        'is_default_run_upload_workgroup': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'external_provider_id': 'ExternalProviderId',
        'name': 'Name',
        'domain_name': 'DomainName',
        'is_collaborative': 'IsCollaborative',
        'subscription': 'Subscription',
        'display_name': 'DisplayName',
        'is_default_run_upload_workgroup': 'IsDefaultRunUploadWorkgroup'
    }

    def __init__(self, id=None, external_provider_id=None, name=None, domain_name=None, is_collaborative=None, subscription=None, display_name=None, is_default_run_upload_workgroup=None):  # noqa: E501
        """V2Workgroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._external_provider_id = None
        self._name = None
        self._domain_name = None
        self._is_collaborative = None
        self._subscription = None
        self._display_name = None
        self._is_default_run_upload_workgroup = None
        self.discriminator = None
        self.id = id
        self.external_provider_id = external_provider_id
        self.name = name
        self.domain_name = domain_name
        self.is_collaborative = is_collaborative
        self.subscription = subscription
        self.display_name = display_name
        if is_default_run_upload_workgroup is not None:
            self.is_default_run_upload_workgroup = is_default_run_upload_workgroup

    @property
    def id(self):
        """Gets the id of this V2Workgroup.  # noqa: E501


        :return: The id of this V2Workgroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2Workgroup.


        :param id: The id of this V2Workgroup.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def external_provider_id(self):
        """Gets the external_provider_id of this V2Workgroup.  # noqa: E501


        :return: The external_provider_id of this V2Workgroup.  # noqa: E501
        :rtype: str
        """
        return self._external_provider_id

    @external_provider_id.setter
    def external_provider_id(self, external_provider_id):
        """Sets the external_provider_id of this V2Workgroup.


        :param external_provider_id: The external_provider_id of this V2Workgroup.  # noqa: E501
        :type: str
        """
        if external_provider_id is None:
            raise ValueError("Invalid value for `external_provider_id`, must not be `None`")  # noqa: E501

        self._external_provider_id = external_provider_id

    @property
    def name(self):
        """Gets the name of this V2Workgroup.  # noqa: E501


        :return: The name of this V2Workgroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2Workgroup.


        :param name: The name of this V2Workgroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def domain_name(self):
        """Gets the domain_name of this V2Workgroup.  # noqa: E501


        :return: The domain_name of this V2Workgroup.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this V2Workgroup.


        :param domain_name: The domain_name of this V2Workgroup.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def is_collaborative(self):
        """Gets the is_collaborative of this V2Workgroup.  # noqa: E501


        :return: The is_collaborative of this V2Workgroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_collaborative

    @is_collaborative.setter
    def is_collaborative(self, is_collaborative):
        """Sets the is_collaborative of this V2Workgroup.


        :param is_collaborative: The is_collaborative of this V2Workgroup.  # noqa: E501
        :type: bool
        """
        if is_collaborative is None:
            raise ValueError("Invalid value for `is_collaborative`, must not be `None`")  # noqa: E501

        self._is_collaborative = is_collaborative

    @property
    def subscription(self):
        """Gets the subscription of this V2Workgroup.  # noqa: E501


        :return: The subscription of this V2Workgroup.  # noqa: E501
        :rtype: V2UserSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this V2Workgroup.


        :param subscription: The subscription of this V2Workgroup.  # noqa: E501
        :type: V2UserSubscription
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")  # noqa: E501

        self._subscription = subscription

    @property
    def display_name(self):
        """Gets the display_name of this V2Workgroup.  # noqa: E501


        :return: The display_name of this V2Workgroup.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V2Workgroup.


        :param display_name: The display_name of this V2Workgroup.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def is_default_run_upload_workgroup(self):
        """Gets the is_default_run_upload_workgroup of this V2Workgroup.  # noqa: E501


        :return: The is_default_run_upload_workgroup of this V2Workgroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_run_upload_workgroup

    @is_default_run_upload_workgroup.setter
    def is_default_run_upload_workgroup(self, is_default_run_upload_workgroup):
        """Sets the is_default_run_upload_workgroup of this V2Workgroup.


        :param is_default_run_upload_workgroup: The is_default_run_upload_workgroup of this V2Workgroup.  # noqa: E501
        :type: bool
        """

        self._is_default_run_upload_workgroup = is_default_run_upload_workgroup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2Workgroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Workgroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
