# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2UserNotificationCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'run_id': 'str',
        'app_session_id': 'str',
        'invite_id': 'str',
        'notification_info': 'V2NotificationInfo',
        'attention_required': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'run_id': 'RunId',
        'app_session_id': 'AppSessionId',
        'invite_id': 'InviteId',
        'notification_info': 'NotificationInfo',
        'attention_required': 'AttentionRequired'
    }

    def __init__(self, id=None, href=None, date_created=None, date_modified=None, run_id=None, app_session_id=None, invite_id=None, notification_info=None, attention_required=None):  # noqa: E501
        """V2UserNotificationCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._date_created = None
        self._date_modified = None
        self._run_id = None
        self._app_session_id = None
        self._invite_id = None
        self._notification_info = None
        self._attention_required = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if run_id is not None:
            self.run_id = run_id
        if app_session_id is not None:
            self.app_session_id = app_session_id
        if invite_id is not None:
            self.invite_id = invite_id
        if notification_info is not None:
            self.notification_info = notification_info
        if attention_required is not None:
            self.attention_required = attention_required

    @property
    def id(self):
        """Gets the id of this V2UserNotificationCompact.  # noqa: E501


        :return: The id of this V2UserNotificationCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2UserNotificationCompact.


        :param id: The id of this V2UserNotificationCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2UserNotificationCompact.  # noqa: E501


        :return: The href of this V2UserNotificationCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2UserNotificationCompact.


        :param href: The href of this V2UserNotificationCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def date_created(self):
        """Gets the date_created of this V2UserNotificationCompact.  # noqa: E501


        :return: The date_created of this V2UserNotificationCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2UserNotificationCompact.


        :param date_created: The date_created of this V2UserNotificationCompact.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V2UserNotificationCompact.  # noqa: E501


        :return: The date_modified of this V2UserNotificationCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V2UserNotificationCompact.


        :param date_modified: The date_modified of this V2UserNotificationCompact.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def run_id(self):
        """Gets the run_id of this V2UserNotificationCompact.  # noqa: E501


        :return: The run_id of this V2UserNotificationCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this V2UserNotificationCompact.


        :param run_id: The run_id of this V2UserNotificationCompact.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def app_session_id(self):
        """Gets the app_session_id of this V2UserNotificationCompact.  # noqa: E501


        :return: The app_session_id of this V2UserNotificationCompact.  # noqa: E501
        :rtype: str
        """
        return self._app_session_id

    @app_session_id.setter
    def app_session_id(self, app_session_id):
        """Sets the app_session_id of this V2UserNotificationCompact.


        :param app_session_id: The app_session_id of this V2UserNotificationCompact.  # noqa: E501
        :type: str
        """

        self._app_session_id = app_session_id

    @property
    def invite_id(self):
        """Gets the invite_id of this V2UserNotificationCompact.  # noqa: E501


        :return: The invite_id of this V2UserNotificationCompact.  # noqa: E501
        :rtype: str
        """
        return self._invite_id

    @invite_id.setter
    def invite_id(self, invite_id):
        """Sets the invite_id of this V2UserNotificationCompact.


        :param invite_id: The invite_id of this V2UserNotificationCompact.  # noqa: E501
        :type: str
        """

        self._invite_id = invite_id

    @property
    def notification_info(self):
        """Gets the notification_info of this V2UserNotificationCompact.  # noqa: E501


        :return: The notification_info of this V2UserNotificationCompact.  # noqa: E501
        :rtype: V2NotificationInfo
        """
        return self._notification_info

    @notification_info.setter
    def notification_info(self, notification_info):
        """Sets the notification_info of this V2UserNotificationCompact.


        :param notification_info: The notification_info of this V2UserNotificationCompact.  # noqa: E501
        :type: V2NotificationInfo
        """

        self._notification_info = notification_info

    @property
    def attention_required(self):
        """Gets the attention_required of this V2UserNotificationCompact.  # noqa: E501


        :return: The attention_required of this V2UserNotificationCompact.  # noqa: E501
        :rtype: bool
        """
        return self._attention_required

    @attention_required.setter
    def attention_required(self, attention_required):
        """Sets the attention_required of this V2UserNotificationCompact.


        :param attention_required: The attention_required of this V2UserNotificationCompact.  # noqa: E501
        :type: bool
        """

        self._attention_required = attention_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2UserNotificationCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2UserNotificationCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
