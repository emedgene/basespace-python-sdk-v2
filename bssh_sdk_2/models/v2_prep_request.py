# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PrepRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'status': 'str',
        'bio_sample': 'V2BiologicalSampleCompact',
        'library_prep': 'LibraryPrepKitCompact',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'required_yield': 'int',
        'required_yield_gb': 'float',
        'limsid': 'str',
        'created_from_file_name': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'status': 'Status',
        'bio_sample': 'BioSample',
        'library_prep': 'LibraryPrep',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'required_yield': 'RequiredYield',
        'required_yield_gb': 'RequiredYieldGb',
        'limsid': 'LIMSId',
        'created_from_file_name': 'CreatedFromFileName'
    }

    def __init__(self, id=None, href=None, status=None, bio_sample=None, library_prep=None, date_created=None, date_modified=None, required_yield=None, required_yield_gb=None, limsid=None, created_from_file_name=None):  # noqa: E501
        """V2PrepRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._status = None
        self._bio_sample = None
        self._library_prep = None
        self._date_created = None
        self._date_modified = None
        self._required_yield = None
        self._required_yield_gb = None
        self._limsid = None
        self._created_from_file_name = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if status is not None:
            self.status = status
        if bio_sample is not None:
            self.bio_sample = bio_sample
        if library_prep is not None:
            self.library_prep = library_prep
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if required_yield is not None:
            self.required_yield = required_yield
        if required_yield_gb is not None:
            self.required_yield_gb = required_yield_gb
        if limsid is not None:
            self.limsid = limsid
        if created_from_file_name is not None:
            self.created_from_file_name = created_from_file_name

    @property
    def id(self):
        """Gets the id of this V2PrepRequest.  # noqa: E501


        :return: The id of this V2PrepRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2PrepRequest.


        :param id: The id of this V2PrepRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2PrepRequest.  # noqa: E501


        :return: The href of this V2PrepRequest.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2PrepRequest.


        :param href: The href of this V2PrepRequest.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def status(self):
        """Gets the status of this V2PrepRequest.  # noqa: E501


        :return: The status of this V2PrepRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2PrepRequest.


        :param status: The status of this V2PrepRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def bio_sample(self):
        """Gets the bio_sample of this V2PrepRequest.  # noqa: E501


        :return: The bio_sample of this V2PrepRequest.  # noqa: E501
        :rtype: V2BiologicalSampleCompact
        """
        return self._bio_sample

    @bio_sample.setter
    def bio_sample(self, bio_sample):
        """Sets the bio_sample of this V2PrepRequest.


        :param bio_sample: The bio_sample of this V2PrepRequest.  # noqa: E501
        :type: V2BiologicalSampleCompact
        """

        self._bio_sample = bio_sample

    @property
    def library_prep(self):
        """Gets the library_prep of this V2PrepRequest.  # noqa: E501


        :return: The library_prep of this V2PrepRequest.  # noqa: E501
        :rtype: LibraryPrepKitCompact
        """
        return self._library_prep

    @library_prep.setter
    def library_prep(self, library_prep):
        """Sets the library_prep of this V2PrepRequest.


        :param library_prep: The library_prep of this V2PrepRequest.  # noqa: E501
        :type: LibraryPrepKitCompact
        """

        self._library_prep = library_prep

    @property
    def date_created(self):
        """Gets the date_created of this V2PrepRequest.  # noqa: E501


        :return: The date_created of this V2PrepRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2PrepRequest.


        :param date_created: The date_created of this V2PrepRequest.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V2PrepRequest.  # noqa: E501


        :return: The date_modified of this V2PrepRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V2PrepRequest.


        :param date_modified: The date_modified of this V2PrepRequest.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def required_yield(self):
        """Gets the required_yield of this V2PrepRequest.  # noqa: E501


        :return: The required_yield of this V2PrepRequest.  # noqa: E501
        :rtype: int
        """
        return self._required_yield

    @required_yield.setter
    def required_yield(self, required_yield):
        """Sets the required_yield of this V2PrepRequest.


        :param required_yield: The required_yield of this V2PrepRequest.  # noqa: E501
        :type: int
        """

        self._required_yield = required_yield

    @property
    def required_yield_gb(self):
        """Gets the required_yield_gb of this V2PrepRequest.  # noqa: E501


        :return: The required_yield_gb of this V2PrepRequest.  # noqa: E501
        :rtype: float
        """
        return self._required_yield_gb

    @required_yield_gb.setter
    def required_yield_gb(self, required_yield_gb):
        """Sets the required_yield_gb of this V2PrepRequest.


        :param required_yield_gb: The required_yield_gb of this V2PrepRequest.  # noqa: E501
        :type: float
        """

        self._required_yield_gb = required_yield_gb

    @property
    def limsid(self):
        """Gets the limsid of this V2PrepRequest.  # noqa: E501


        :return: The limsid of this V2PrepRequest.  # noqa: E501
        :rtype: str
        """
        return self._limsid

    @limsid.setter
    def limsid(self, limsid):
        """Sets the limsid of this V2PrepRequest.


        :param limsid: The limsid of this V2PrepRequest.  # noqa: E501
        :type: str
        """

        self._limsid = limsid

    @property
    def created_from_file_name(self):
        """Gets the created_from_file_name of this V2PrepRequest.  # noqa: E501


        :return: The created_from_file_name of this V2PrepRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_from_file_name

    @created_from_file_name.setter
    def created_from_file_name(self, created_from_file_name):
        """Sets the created_from_file_name of this V2PrepRequest.


        :param created_from_file_name: The created_from_file_name of this V2PrepRequest.  # noqa: E501
        :type: str
        """

        self._created_from_file_name = created_from_file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PrepRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PrepRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
