# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PropertyContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items': 'list[V2PropertyCompact]',
        'displayed_count': 'int',
        'total_count': 'int',
        'href': 'str'
    }

    attribute_map = {
        'items': 'Items',
        'displayed_count': 'DisplayedCount',
        'total_count': 'TotalCount',
        'href': 'Href'
    }

    def __init__(self, items=None, displayed_count=None, total_count=None, href=None):  # noqa: E501
        """V2PropertyContainer - a model defined in Swagger"""  # noqa: E501
        self._items = None
        self._displayed_count = None
        self._total_count = None
        self._href = None
        self.discriminator = None
        if items is not None:
            self.items = items
        if displayed_count is not None:
            self.displayed_count = displayed_count
        if total_count is not None:
            self.total_count = total_count
        if href is not None:
            self.href = href

    @property
    def items(self):
        """Gets the items of this V2PropertyContainer.  # noqa: E501


        :return: The items of this V2PropertyContainer.  # noqa: E501
        :rtype: list[V2PropertyCompact]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this V2PropertyContainer.


        :param items: The items of this V2PropertyContainer.  # noqa: E501
        :type: list[V2PropertyCompact]
        """

        self._items = items

    @property
    def displayed_count(self):
        """Gets the displayed_count of this V2PropertyContainer.  # noqa: E501


        :return: The displayed_count of this V2PropertyContainer.  # noqa: E501
        :rtype: int
        """
        return self._displayed_count

    @displayed_count.setter
    def displayed_count(self, displayed_count):
        """Sets the displayed_count of this V2PropertyContainer.


        :param displayed_count: The displayed_count of this V2PropertyContainer.  # noqa: E501
        :type: int
        """

        self._displayed_count = displayed_count

    @property
    def total_count(self):
        """Gets the total_count of this V2PropertyContainer.  # noqa: E501


        :return: The total_count of this V2PropertyContainer.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this V2PropertyContainer.


        :param total_count: The total_count of this V2PropertyContainer.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def href(self):
        """Gets the href of this V2PropertyContainer.  # noqa: E501


        :return: The href of this V2PropertyContainer.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2PropertyContainer.


        :param href: The href of this V2PropertyContainer.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PropertyContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PropertyContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
