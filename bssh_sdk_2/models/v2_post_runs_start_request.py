# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PostRunsStartRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jwt': 'str',
        'planned_run_id': 'str',
        'instrument_run_id': 'str',
        'run_name': 'str',
        'flowcell_barcode': 'str',
        'reagent_barcode': 'str',
        'run_mode': 'str',
        'run_parameters_xml': 'str',
        'instrument_run_number': 'int',
        'instrument_software_version': 'str',
        'sample_sheet_name': 'str'
    }

    attribute_map = {
        'jwt': 'Jwt',
        'planned_run_id': 'PlannedRunId',
        'instrument_run_id': 'InstrumentRunId',
        'run_name': 'RunName',
        'flowcell_barcode': 'FlowcellBarcode',
        'reagent_barcode': 'ReagentBarcode',
        'run_mode': 'RunMode',
        'run_parameters_xml': 'RunParametersXml',
        'instrument_run_number': 'InstrumentRunNumber',
        'instrument_software_version': 'InstrumentSoftwareVersion',
        'sample_sheet_name': 'SampleSheetName'
    }

    def __init__(self, jwt=None, planned_run_id=None, instrument_run_id=None, run_name=None, flowcell_barcode=None, reagent_barcode=None, run_mode=None, run_parameters_xml=None, instrument_run_number=None, instrument_software_version=None, sample_sheet_name=None):  # noqa: E501
        """V2PostRunsStartRequest - a model defined in Swagger"""  # noqa: E501
        self._jwt = None
        self._planned_run_id = None
        self._instrument_run_id = None
        self._run_name = None
        self._flowcell_barcode = None
        self._reagent_barcode = None
        self._run_mode = None
        self._run_parameters_xml = None
        self._instrument_run_number = None
        self._instrument_software_version = None
        self._sample_sheet_name = None
        self.discriminator = None
        self.jwt = jwt
        self.planned_run_id = planned_run_id
        self.instrument_run_id = instrument_run_id
        if run_name is not None:
            self.run_name = run_name
        self.flowcell_barcode = flowcell_barcode
        self.reagent_barcode = reagent_barcode
        self.run_mode = run_mode
        self.run_parameters_xml = run_parameters_xml
        self.instrument_run_number = instrument_run_number
        self.instrument_software_version = instrument_software_version
        self.sample_sheet_name = sample_sheet_name

    @property
    def jwt(self):
        """Gets the jwt of this V2PostRunsStartRequest.  # noqa: E501

        Stratus JWT issued by platform upon user login  # noqa: E501

        :return: The jwt of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._jwt

    @jwt.setter
    def jwt(self, jwt):
        """Sets the jwt of this V2PostRunsStartRequest.

        Stratus JWT issued by platform upon user login  # noqa: E501

        :param jwt: The jwt of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if jwt is None:
            raise ValueError("Invalid value for `jwt`, must not be `None`")  # noqa: E501

        self._jwt = jwt

    @property
    def planned_run_id(self):
        """Gets the planned_run_id of this V2PostRunsStartRequest.  # noqa: E501

        The GLS planned run ID  # noqa: E501

        :return: The planned_run_id of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._planned_run_id

    @planned_run_id.setter
    def planned_run_id(self, planned_run_id):
        """Sets the planned_run_id of this V2PostRunsStartRequest.

        The GLS planned run ID  # noqa: E501

        :param planned_run_id: The planned_run_id of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if planned_run_id is None:
            raise ValueError("Invalid value for `planned_run_id`, must not be `None`")  # noqa: E501

        self._planned_run_id = planned_run_id

    @property
    def instrument_run_id(self):
        """Gets the instrument_run_id of this V2PostRunsStartRequest.  # noqa: E501

        The instrument run ID value that should be used (instrument generated)  # noqa: E501

        :return: The instrument_run_id of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_id

    @instrument_run_id.setter
    def instrument_run_id(self, instrument_run_id):
        """Sets the instrument_run_id of this V2PostRunsStartRequest.

        The instrument run ID value that should be used (instrument generated)  # noqa: E501

        :param instrument_run_id: The instrument_run_id of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if instrument_run_id is None:
            raise ValueError("Invalid value for `instrument_run_id`, must not be `None`")  # noqa: E501

        self._instrument_run_id = instrument_run_id

    @property
    def run_name(self):
        """Gets the run_name of this V2PostRunsStartRequest.  # noqa: E501

        The name of run that was edited in the instrument  # noqa: E501

        :return: The run_name of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this V2PostRunsStartRequest.

        The name of run that was edited in the instrument  # noqa: E501

        :param run_name: The run_name of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def flowcell_barcode(self):
        """Gets the flowcell_barcode of this V2PostRunsStartRequest.  # noqa: E501

        Flowcell barcode  # noqa: E501

        :return: The flowcell_barcode of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._flowcell_barcode

    @flowcell_barcode.setter
    def flowcell_barcode(self, flowcell_barcode):
        """Sets the flowcell_barcode of this V2PostRunsStartRequest.

        Flowcell barcode  # noqa: E501

        :param flowcell_barcode: The flowcell_barcode of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if flowcell_barcode is None:
            raise ValueError("Invalid value for `flowcell_barcode`, must not be `None`")  # noqa: E501

        self._flowcell_barcode = flowcell_barcode

    @property
    def reagent_barcode(self):
        """Gets the reagent_barcode of this V2PostRunsStartRequest.  # noqa: E501

        ReagentBarcode for the run  # noqa: E501

        :return: The reagent_barcode of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._reagent_barcode

    @reagent_barcode.setter
    def reagent_barcode(self, reagent_barcode):
        """Sets the reagent_barcode of this V2PostRunsStartRequest.

        ReagentBarcode for the run  # noqa: E501

        :param reagent_barcode: The reagent_barcode of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if reagent_barcode is None:
            raise ValueError("Invalid value for `reagent_barcode`, must not be `None`")  # noqa: E501

        self._reagent_barcode = reagent_barcode

    @property
    def run_mode(self):
        """Gets the run_mode of this V2PostRunsStartRequest.  # noqa: E501

        Run mode  # noqa: E501

        :return: The run_mode of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_mode

    @run_mode.setter
    def run_mode(self, run_mode):
        """Sets the run_mode of this V2PostRunsStartRequest.

        Run mode  # noqa: E501

        :param run_mode: The run_mode of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if run_mode is None:
            raise ValueError("Invalid value for `run_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["InstrumentMetrics", "InstrumentAndRunMetrics", "InstrumentAndRunMetricsAndRunOutput"]  # noqa: E501
        if run_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `run_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(run_mode, allowed_values)
            )

        self._run_mode = run_mode

    @property
    def run_parameters_xml(self):
        """Gets the run_parameters_xml of this V2PostRunsStartRequest.  # noqa: E501

        Run parameters xml  # noqa: E501

        :return: The run_parameters_xml of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_parameters_xml

    @run_parameters_xml.setter
    def run_parameters_xml(self, run_parameters_xml):
        """Sets the run_parameters_xml of this V2PostRunsStartRequest.

        Run parameters xml  # noqa: E501

        :param run_parameters_xml: The run_parameters_xml of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if run_parameters_xml is None:
            raise ValueError("Invalid value for `run_parameters_xml`, must not be `None`")  # noqa: E501

        self._run_parameters_xml = run_parameters_xml

    @property
    def instrument_run_number(self):
        """Gets the instrument_run_number of this V2PostRunsStartRequest.  # noqa: E501

        Run number  # noqa: E501

        :return: The instrument_run_number of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: int
        """
        return self._instrument_run_number

    @instrument_run_number.setter
    def instrument_run_number(self, instrument_run_number):
        """Sets the instrument_run_number of this V2PostRunsStartRequest.

        Run number  # noqa: E501

        :param instrument_run_number: The instrument_run_number of this V2PostRunsStartRequest.  # noqa: E501
        :type: int
        """
        if instrument_run_number is None:
            raise ValueError("Invalid value for `instrument_run_number`, must not be `None`")  # noqa: E501

        self._instrument_run_number = instrument_run_number

    @property
    def instrument_software_version(self):
        """Gets the instrument_software_version of this V2PostRunsStartRequest.  # noqa: E501

        Instrument software version  # noqa: E501

        :return: The instrument_software_version of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_software_version

    @instrument_software_version.setter
    def instrument_software_version(self, instrument_software_version):
        """Sets the instrument_software_version of this V2PostRunsStartRequest.

        Instrument software version  # noqa: E501

        :param instrument_software_version: The instrument_software_version of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if instrument_software_version is None:
            raise ValueError("Invalid value for `instrument_software_version`, must not be `None`")  # noqa: E501

        self._instrument_software_version = instrument_software_version

    @property
    def sample_sheet_name(self):
        """Gets the sample_sheet_name of this V2PostRunsStartRequest.  # noqa: E501

        Sample sheet name used in instrument  # noqa: E501

        :return: The sample_sheet_name of this V2PostRunsStartRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_sheet_name

    @sample_sheet_name.setter
    def sample_sheet_name(self, sample_sheet_name):
        """Sets the sample_sheet_name of this V2PostRunsStartRequest.

        Sample sheet name used in instrument  # noqa: E501

        :param sample_sheet_name: The sample_sheet_name of this V2PostRunsStartRequest.  # noqa: E501
        :type: str
        """
        if sample_sheet_name is None:
            raise ValueError("Invalid value for `sample_sheet_name`, must not be `None`")  # noqa: E501

        self._sample_sheet_name = sample_sheet_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PostRunsStartRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PostRunsStartRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
