# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2UserSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'plan': 'str',
        'expiration_date': 'datetime',
        'start_date': 'datetime',
        'is_active': 'bool',
        'storage': 'SubscriptionStorage',
        'wallet': 'Wallet',
        'is_grace_period': 'bool',
        'has_active_ica_subscription': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'plan': 'Plan',
        'expiration_date': 'ExpirationDate',
        'start_date': 'StartDate',
        'is_active': 'IsActive',
        'storage': 'Storage',
        'wallet': 'Wallet',
        'is_grace_period': 'IsGracePeriod',
        'has_active_ica_subscription': 'HasActiveIcaSubscription'
    }

    def __init__(self, name=None, plan=None, expiration_date=None, start_date=None, is_active=None, storage=None, wallet=None, is_grace_period=None, has_active_ica_subscription=None):  # noqa: E501
        """V2UserSubscription - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._plan = None
        self._expiration_date = None
        self._start_date = None
        self._is_active = None
        self._storage = None
        self._wallet = None
        self._is_grace_period = None
        self._has_active_ica_subscription = None
        self.discriminator = None
        self.name = name
        if plan is not None:
            self.plan = plan
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if start_date is not None:
            self.start_date = start_date
        if is_active is not None:
            self.is_active = is_active
        if storage is not None:
            self.storage = storage
        if wallet is not None:
            self.wallet = wallet
        if is_grace_period is not None:
            self.is_grace_period = is_grace_period
        if has_active_ica_subscription is not None:
            self.has_active_ica_subscription = has_active_ica_subscription

    @property
    def name(self):
        """Gets the name of this V2UserSubscription.  # noqa: E501


        :return: The name of this V2UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2UserSubscription.


        :param name: The name of this V2UserSubscription.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this V2UserSubscription.  # noqa: E501


        :return: The plan of this V2UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this V2UserSubscription.


        :param plan: The plan of this V2UserSubscription.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def expiration_date(self):
        """Gets the expiration_date of this V2UserSubscription.  # noqa: E501


        :return: The expiration_date of this V2UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this V2UserSubscription.


        :param expiration_date: The expiration_date of this V2UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def start_date(self):
        """Gets the start_date of this V2UserSubscription.  # noqa: E501


        :return: The start_date of this V2UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this V2UserSubscription.


        :param start_date: The start_date of this V2UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def is_active(self):
        """Gets the is_active of this V2UserSubscription.  # noqa: E501


        :return: The is_active of this V2UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this V2UserSubscription.


        :param is_active: The is_active of this V2UserSubscription.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def storage(self):
        """Gets the storage of this V2UserSubscription.  # noqa: E501


        :return: The storage of this V2UserSubscription.  # noqa: E501
        :rtype: SubscriptionStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this V2UserSubscription.


        :param storage: The storage of this V2UserSubscription.  # noqa: E501
        :type: SubscriptionStorage
        """

        self._storage = storage

    @property
    def wallet(self):
        """Gets the wallet of this V2UserSubscription.  # noqa: E501


        :return: The wallet of this V2UserSubscription.  # noqa: E501
        :rtype: Wallet
        """
        return self._wallet

    @wallet.setter
    def wallet(self, wallet):
        """Sets the wallet of this V2UserSubscription.


        :param wallet: The wallet of this V2UserSubscription.  # noqa: E501
        :type: Wallet
        """

        self._wallet = wallet

    @property
    def is_grace_period(self):
        """Gets the is_grace_period of this V2UserSubscription.  # noqa: E501


        :return: The is_grace_period of this V2UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_grace_period

    @is_grace_period.setter
    def is_grace_period(self, is_grace_period):
        """Sets the is_grace_period of this V2UserSubscription.


        :param is_grace_period: The is_grace_period of this V2UserSubscription.  # noqa: E501
        :type: bool
        """

        self._is_grace_period = is_grace_period

    @property
    def has_active_ica_subscription(self):
        """Gets the has_active_ica_subscription of this V2UserSubscription.  # noqa: E501


        :return: The has_active_ica_subscription of this V2UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._has_active_ica_subscription

    @has_active_ica_subscription.setter
    def has_active_ica_subscription(self, has_active_ica_subscription):
        """Sets the has_active_ica_subscription of this V2UserSubscription.


        :param has_active_ica_subscription: The has_active_ica_subscription of this V2UserSubscription.  # noqa: E501
        :type: bool
        """

        self._has_active_ica_subscription = has_active_ica_subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2UserSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2UserSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
