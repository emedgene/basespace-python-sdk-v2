# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2DatasetTypeAttributeSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparer': 'StringIEqualityComparer',
        'count': 'int',
        'keys': 'StringV2DatasetAttributeDefinitionKeyCollection',
        'values': 'StringV2DatasetAttributeDefinitionValueCollection',
        'item': 'list[V2DatasetAttributeDefinition]'
    }

    attribute_map = {
        'comparer': 'Comparer',
        'count': 'Count',
        'keys': 'Keys',
        'values': 'Values',
        'item': 'Item'
    }

    def __init__(self, comparer=None, count=None, keys=None, values=None, item=None):  # noqa: E501
        """V2DatasetTypeAttributeSchema - a model defined in Swagger"""  # noqa: E501
        self._comparer = None
        self._count = None
        self._keys = None
        self._values = None
        self._item = None
        self.discriminator = None
        self.comparer = comparer
        self.count = count
        self.keys = keys
        self.values = values
        self.item = item

    @property
    def comparer(self):
        """Gets the comparer of this V2DatasetTypeAttributeSchema.  # noqa: E501


        :return: The comparer of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :rtype: StringIEqualityComparer
        """
        return self._comparer

    @comparer.setter
    def comparer(self, comparer):
        """Sets the comparer of this V2DatasetTypeAttributeSchema.


        :param comparer: The comparer of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :type: StringIEqualityComparer
        """
        if comparer is None:
            raise ValueError("Invalid value for `comparer`, must not be `None`")  # noqa: E501

        self._comparer = comparer

    @property
    def count(self):
        """Gets the count of this V2DatasetTypeAttributeSchema.  # noqa: E501


        :return: The count of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this V2DatasetTypeAttributeSchema.


        :param count: The count of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def keys(self):
        """Gets the keys of this V2DatasetTypeAttributeSchema.  # noqa: E501


        :return: The keys of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :rtype: StringV2DatasetAttributeDefinitionKeyCollection
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this V2DatasetTypeAttributeSchema.


        :param keys: The keys of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :type: StringV2DatasetAttributeDefinitionKeyCollection
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501

        self._keys = keys

    @property
    def values(self):
        """Gets the values of this V2DatasetTypeAttributeSchema.  # noqa: E501


        :return: The values of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :rtype: StringV2DatasetAttributeDefinitionValueCollection
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this V2DatasetTypeAttributeSchema.


        :param values: The values of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :type: StringV2DatasetAttributeDefinitionValueCollection
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def item(self):
        """Gets the item of this V2DatasetTypeAttributeSchema.  # noqa: E501


        :return: The item of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :rtype: list[V2DatasetAttributeDefinition]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this V2DatasetTypeAttributeSchema.


        :param item: The item of this V2DatasetTypeAttributeSchema.  # noqa: E501
        :type: list[V2DatasetAttributeDefinition]
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2DatasetTypeAttributeSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2DatasetTypeAttributeSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
