# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PropertyForPosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'items': 'list[str]',
        'content_map': 'MapContent',
        'items_map': 'list[MapContent]',
        'content': 'str',
        'options': 'V1pre3PropertyOptionsRequest'
    }

    attribute_map = {
        'id': 'Id',
        'type': 'Type',
        'name': 'Name',
        'description': 'Description',
        'items': 'Items',
        'content_map': 'ContentMap',
        'items_map': 'ItemsMap',
        'content': 'Content',
        'options': 'Options'
    }

    def __init__(self, id=None, type=None, name=None, description=None, items=None, content_map=None, items_map=None, content=None, options=None):  # noqa: E501
        """V2PropertyForPosts - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._name = None
        self._description = None
        self._items = None
        self._content_map = None
        self._items_map = None
        self._content = None
        self._options = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if items is not None:
            self.items = items
        if content_map is not None:
            self.content_map = content_map
        if items_map is not None:
            self.items_map = items_map
        if content is not None:
            self.content = content
        if options is not None:
            self.options = options

    @property
    def id(self):
        """Gets the id of this V2PropertyForPosts.  # noqa: E501


        :return: The id of this V2PropertyForPosts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2PropertyForPosts.


        :param id: The id of this V2PropertyForPosts.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this V2PropertyForPosts.  # noqa: E501


        :return: The type of this V2PropertyForPosts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2PropertyForPosts.


        :param type: The type of this V2PropertyForPosts.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this V2PropertyForPosts.  # noqa: E501


        :return: The name of this V2PropertyForPosts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2PropertyForPosts.


        :param name: The name of this V2PropertyForPosts.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this V2PropertyForPosts.  # noqa: E501


        :return: The description of this V2PropertyForPosts.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2PropertyForPosts.


        :param description: The description of this V2PropertyForPosts.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def items(self):
        """Gets the items of this V2PropertyForPosts.  # noqa: E501


        :return: The items of this V2PropertyForPosts.  # noqa: E501
        :rtype: list[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this V2PropertyForPosts.


        :param items: The items of this V2PropertyForPosts.  # noqa: E501
        :type: list[str]
        """

        self._items = items

    @property
    def content_map(self):
        """Gets the content_map of this V2PropertyForPosts.  # noqa: E501


        :return: The content_map of this V2PropertyForPosts.  # noqa: E501
        :rtype: MapContent
        """
        return self._content_map

    @content_map.setter
    def content_map(self, content_map):
        """Sets the content_map of this V2PropertyForPosts.


        :param content_map: The content_map of this V2PropertyForPosts.  # noqa: E501
        :type: MapContent
        """

        self._content_map = content_map

    @property
    def items_map(self):
        """Gets the items_map of this V2PropertyForPosts.  # noqa: E501


        :return: The items_map of this V2PropertyForPosts.  # noqa: E501
        :rtype: list[MapContent]
        """
        return self._items_map

    @items_map.setter
    def items_map(self, items_map):
        """Sets the items_map of this V2PropertyForPosts.


        :param items_map: The items_map of this V2PropertyForPosts.  # noqa: E501
        :type: list[MapContent]
        """

        self._items_map = items_map

    @property
    def content(self):
        """Gets the content of this V2PropertyForPosts.  # noqa: E501


        :return: The content of this V2PropertyForPosts.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this V2PropertyForPosts.


        :param content: The content of this V2PropertyForPosts.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def options(self):
        """Gets the options of this V2PropertyForPosts.  # noqa: E501


        :return: The options of this V2PropertyForPosts.  # noqa: E501
        :rtype: V1pre3PropertyOptionsRequest
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this V2PropertyForPosts.


        :param options: The options of this V2PropertyForPosts.  # noqa: E501
        :type: V1pre3PropertyOptionsRequest
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PropertyForPosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PropertyForPosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
