# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PropertyItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content': 'str',
        'application': 'V1pre3ApplicationCompact',
        'app_session': 'V2AppSessionCompact',
        'bio_sample': 'V2BiologicalSampleCompact',
        'dataset': 'V2DatasetCompact',
        'file': 'V1pre3FileCompact',
        'sample_library': 'V2LibraryCompact',
        'library_pool': 'V1pre3LibraryPoolCompact',
        'project': 'V1pre3ProjectCompact',
        'run': 'V1pre3RunCompact',
        'subject': 'V2SubjectCompact',
        'user': 'V1pre3UserCompact',
        'content_map': 'MapContent'
    }

    attribute_map = {
        'id': 'Id',
        'content': 'Content',
        'application': 'Application',
        'app_session': 'AppSession',
        'bio_sample': 'BioSample',
        'dataset': 'Dataset',
        'file': 'File',
        'sample_library': 'SampleLibrary',
        'library_pool': 'LibraryPool',
        'project': 'Project',
        'run': 'Run',
        'subject': 'Subject',
        'user': 'User',
        'content_map': 'ContentMap'
    }

    def __init__(self, id=None, content=None, application=None, app_session=None, bio_sample=None, dataset=None, file=None, sample_library=None, library_pool=None, project=None, run=None, subject=None, user=None, content_map=None):  # noqa: E501
        """V2PropertyItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self._application = None
        self._app_session = None
        self._bio_sample = None
        self._dataset = None
        self._file = None
        self._sample_library = None
        self._library_pool = None
        self._project = None
        self._run = None
        self._subject = None
        self._user = None
        self._content_map = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if content is not None:
            self.content = content
        if application is not None:
            self.application = application
        if app_session is not None:
            self.app_session = app_session
        if bio_sample is not None:
            self.bio_sample = bio_sample
        if dataset is not None:
            self.dataset = dataset
        if file is not None:
            self.file = file
        if sample_library is not None:
            self.sample_library = sample_library
        if library_pool is not None:
            self.library_pool = library_pool
        if project is not None:
            self.project = project
        if run is not None:
            self.run = run
        if subject is not None:
            self.subject = subject
        if user is not None:
            self.user = user
        if content_map is not None:
            self.content_map = content_map

    @property
    def id(self):
        """Gets the id of this V2PropertyItem.  # noqa: E501


        :return: The id of this V2PropertyItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2PropertyItem.


        :param id: The id of this V2PropertyItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def content(self):
        """Gets the content of this V2PropertyItem.  # noqa: E501


        :return: The content of this V2PropertyItem.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this V2PropertyItem.


        :param content: The content of this V2PropertyItem.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def application(self):
        """Gets the application of this V2PropertyItem.  # noqa: E501


        :return: The application of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3ApplicationCompact
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this V2PropertyItem.


        :param application: The application of this V2PropertyItem.  # noqa: E501
        :type: V1pre3ApplicationCompact
        """

        self._application = application

    @property
    def app_session(self):
        """Gets the app_session of this V2PropertyItem.  # noqa: E501


        :return: The app_session of this V2PropertyItem.  # noqa: E501
        :rtype: V2AppSessionCompact
        """
        return self._app_session

    @app_session.setter
    def app_session(self, app_session):
        """Sets the app_session of this V2PropertyItem.


        :param app_session: The app_session of this V2PropertyItem.  # noqa: E501
        :type: V2AppSessionCompact
        """

        self._app_session = app_session

    @property
    def bio_sample(self):
        """Gets the bio_sample of this V2PropertyItem.  # noqa: E501


        :return: The bio_sample of this V2PropertyItem.  # noqa: E501
        :rtype: V2BiologicalSampleCompact
        """
        return self._bio_sample

    @bio_sample.setter
    def bio_sample(self, bio_sample):
        """Sets the bio_sample of this V2PropertyItem.


        :param bio_sample: The bio_sample of this V2PropertyItem.  # noqa: E501
        :type: V2BiologicalSampleCompact
        """

        self._bio_sample = bio_sample

    @property
    def dataset(self):
        """Gets the dataset of this V2PropertyItem.  # noqa: E501


        :return: The dataset of this V2PropertyItem.  # noqa: E501
        :rtype: V2DatasetCompact
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V2PropertyItem.


        :param dataset: The dataset of this V2PropertyItem.  # noqa: E501
        :type: V2DatasetCompact
        """

        self._dataset = dataset

    @property
    def file(self):
        """Gets the file of this V2PropertyItem.  # noqa: E501


        :return: The file of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3FileCompact
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this V2PropertyItem.


        :param file: The file of this V2PropertyItem.  # noqa: E501
        :type: V1pre3FileCompact
        """

        self._file = file

    @property
    def sample_library(self):
        """Gets the sample_library of this V2PropertyItem.  # noqa: E501


        :return: The sample_library of this V2PropertyItem.  # noqa: E501
        :rtype: V2LibraryCompact
        """
        return self._sample_library

    @sample_library.setter
    def sample_library(self, sample_library):
        """Sets the sample_library of this V2PropertyItem.


        :param sample_library: The sample_library of this V2PropertyItem.  # noqa: E501
        :type: V2LibraryCompact
        """

        self._sample_library = sample_library

    @property
    def library_pool(self):
        """Gets the library_pool of this V2PropertyItem.  # noqa: E501


        :return: The library_pool of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3LibraryPoolCompact
        """
        return self._library_pool

    @library_pool.setter
    def library_pool(self, library_pool):
        """Sets the library_pool of this V2PropertyItem.


        :param library_pool: The library_pool of this V2PropertyItem.  # noqa: E501
        :type: V1pre3LibraryPoolCompact
        """

        self._library_pool = library_pool

    @property
    def project(self):
        """Gets the project of this V2PropertyItem.  # noqa: E501


        :return: The project of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3ProjectCompact
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V2PropertyItem.


        :param project: The project of this V2PropertyItem.  # noqa: E501
        :type: V1pre3ProjectCompact
        """

        self._project = project

    @property
    def run(self):
        """Gets the run of this V2PropertyItem.  # noqa: E501


        :return: The run of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3RunCompact
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this V2PropertyItem.


        :param run: The run of this V2PropertyItem.  # noqa: E501
        :type: V1pre3RunCompact
        """

        self._run = run

    @property
    def subject(self):
        """Gets the subject of this V2PropertyItem.  # noqa: E501


        :return: The subject of this V2PropertyItem.  # noqa: E501
        :rtype: V2SubjectCompact
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this V2PropertyItem.


        :param subject: The subject of this V2PropertyItem.  # noqa: E501
        :type: V2SubjectCompact
        """

        self._subject = subject

    @property
    def user(self):
        """Gets the user of this V2PropertyItem.  # noqa: E501


        :return: The user of this V2PropertyItem.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2PropertyItem.


        :param user: The user of this V2PropertyItem.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user = user

    @property
    def content_map(self):
        """Gets the content_map of this V2PropertyItem.  # noqa: E501


        :return: The content_map of this V2PropertyItem.  # noqa: E501
        :rtype: MapContent
        """
        return self._content_map

    @content_map.setter
    def content_map(self, content_map):
        """Sets the content_map of this V2PropertyItem.


        :param content_map: The content_map of this V2PropertyItem.  # noqa: E501
        :type: MapContent
        """

        self._content_map = content_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PropertyItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PropertyItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
