# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2QcThreshold(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'optional': 'bool',
        'operator': 'str',
        'dataset_type_id': 'str',
        'threshold_values': 'list[object]',
        'group': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'optional': 'Optional',
        'operator': 'Operator',
        'dataset_type_id': 'DatasetTypeId',
        'threshold_values': 'ThresholdValues',
        'group': 'Group'
    }

    def __init__(self, name=None, optional=None, operator=None, dataset_type_id=None, threshold_values=None, group=None):  # noqa: E501
        """V2QcThreshold - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._optional = None
        self._operator = None
        self._dataset_type_id = None
        self._threshold_values = None
        self._group = None
        self.discriminator = None
        self.name = name
        if optional is not None:
            self.optional = optional
        self.operator = operator
        self.dataset_type_id = dataset_type_id
        self.threshold_values = threshold_values
        self.group = group

    @property
    def name(self):
        """Gets the name of this V2QcThreshold.  # noqa: E501

        Name of the metric  # noqa: E501

        :return: The name of this V2QcThreshold.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2QcThreshold.

        Name of the metric  # noqa: E501

        :param name: The name of this V2QcThreshold.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this V2QcThreshold.  # noqa: E501

        Describes whether the QCThreshold is Optional or Required. By default it is set to Required  # noqa: E501

        :return: The optional of this V2QcThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this V2QcThreshold.

        Describes whether the QCThreshold is Optional or Required. By default it is set to Required  # noqa: E501

        :param optional: The optional of this V2QcThreshold.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def operator(self):
        """Gets the operator of this V2QcThreshold.  # noqa: E501

        Valid operators: “Equal”, “LessThan”, “GreaterThan”, “LessThanOrEqual”, “GreaterThanOrEqual”, “NotEqual”, “Between”, “Outside”  # noqa: E501

        :return: The operator of this V2QcThreshold.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this V2QcThreshold.

        Valid operators: “Equal”, “LessThan”, “GreaterThan”, “LessThanOrEqual”, “GreaterThanOrEqual”, “NotEqual”, “Between”, “Outside”  # noqa: E501

        :param operator: The operator of this V2QcThreshold.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def dataset_type_id(self):
        """Gets the dataset_type_id of this V2QcThreshold.  # noqa: E501

        The dataset type slug, e.g. illumina.issac.v4  # noqa: E501

        :return: The dataset_type_id of this V2QcThreshold.  # noqa: E501
        :rtype: str
        """
        return self._dataset_type_id

    @dataset_type_id.setter
    def dataset_type_id(self, dataset_type_id):
        """Sets the dataset_type_id of this V2QcThreshold.

        The dataset type slug, e.g. illumina.issac.v4  # noqa: E501

        :param dataset_type_id: The dataset_type_id of this V2QcThreshold.  # noqa: E501
        :type: str
        """
        if dataset_type_id is None:
            raise ValueError("Invalid value for `dataset_type_id`, must not be `None`")  # noqa: E501

        self._dataset_type_id = dataset_type_id

    @property
    def threshold_values(self):
        """Gets the threshold_values of this V2QcThreshold.  # noqa: E501

        Integer values of the thresholds. A comma separated list can be given for the “Between” and “Outside” operators  # noqa: E501

        :return: The threshold_values of this V2QcThreshold.  # noqa: E501
        :rtype: list[object]
        """
        return self._threshold_values

    @threshold_values.setter
    def threshold_values(self, threshold_values):
        """Sets the threshold_values of this V2QcThreshold.

        Integer values of the thresholds. A comma separated list can be given for the “Between” and “Outside” operators  # noqa: E501

        :param threshold_values: The threshold_values of this V2QcThreshold.  # noqa: E501
        :type: list[object]
        """
        if threshold_values is None:
            raise ValueError("Invalid value for `threshold_values`, must not be `None`")  # noqa: E501

        self._threshold_values = threshold_values

    @property
    def group(self):
        """Gets the group of this V2QcThreshold.  # noqa: E501


        :return: The group of this V2QcThreshold.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this V2QcThreshold.


        :param group: The group of this V2QcThreshold.  # noqa: E501
        :type: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2QcThreshold, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2QcThreshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
