# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2LabRequeueCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'status': 'str',
        'type': 'str',
        'bio_sample': 'V2BiologicalSampleCompact',
        'user_owned_by': 'V1pre3UserCompact',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'requested_additional_yield': 'int',
        'matched_yield': 'int',
        'missing_yield': 'int',
        'limsid': 'str',
        'prep_type': 'str',
        'href_sample_library': 'str',
        'href_library_pool': 'str',
        'href_prep_request': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'status': 'Status',
        'type': 'Type',
        'bio_sample': 'BioSample',
        'user_owned_by': 'UserOwnedBy',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'requested_additional_yield': 'RequestedAdditionalYield',
        'matched_yield': 'MatchedYield',
        'missing_yield': 'MissingYield',
        'limsid': 'LIMSId',
        'prep_type': 'PrepType',
        'href_sample_library': 'HrefSampleLibrary',
        'href_library_pool': 'HrefLibraryPool',
        'href_prep_request': 'HrefPrepRequest'
    }

    def __init__(self, id=None, href=None, status=None, type=None, bio_sample=None, user_owned_by=None, date_created=None, date_modified=None, requested_additional_yield=None, matched_yield=None, missing_yield=None, limsid=None, prep_type=None, href_sample_library=None, href_library_pool=None, href_prep_request=None):  # noqa: E501
        """V2LabRequeueCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._status = None
        self._type = None
        self._bio_sample = None
        self._user_owned_by = None
        self._date_created = None
        self._date_modified = None
        self._requested_additional_yield = None
        self._matched_yield = None
        self._missing_yield = None
        self._limsid = None
        self._prep_type = None
        self._href_sample_library = None
        self._href_library_pool = None
        self._href_prep_request = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if bio_sample is not None:
            self.bio_sample = bio_sample
        if user_owned_by is not None:
            self.user_owned_by = user_owned_by
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if requested_additional_yield is not None:
            self.requested_additional_yield = requested_additional_yield
        if matched_yield is not None:
            self.matched_yield = matched_yield
        if missing_yield is not None:
            self.missing_yield = missing_yield
        if limsid is not None:
            self.limsid = limsid
        if prep_type is not None:
            self.prep_type = prep_type
        if href_sample_library is not None:
            self.href_sample_library = href_sample_library
        if href_library_pool is not None:
            self.href_library_pool = href_library_pool
        if href_prep_request is not None:
            self.href_prep_request = href_prep_request

    @property
    def id(self):
        """Gets the id of this V2LabRequeueCompact.  # noqa: E501


        :return: The id of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2LabRequeueCompact.


        :param id: The id of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2LabRequeueCompact.  # noqa: E501


        :return: The href of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2LabRequeueCompact.


        :param href: The href of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def status(self):
        """Gets the status of this V2LabRequeueCompact.  # noqa: E501


        :return: The status of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2LabRequeueCompact.


        :param status: The status of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this V2LabRequeueCompact.  # noqa: E501


        :return: The type of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2LabRequeueCompact.


        :param type: The type of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def bio_sample(self):
        """Gets the bio_sample of this V2LabRequeueCompact.  # noqa: E501


        :return: The bio_sample of this V2LabRequeueCompact.  # noqa: E501
        :rtype: V2BiologicalSampleCompact
        """
        return self._bio_sample

    @bio_sample.setter
    def bio_sample(self, bio_sample):
        """Sets the bio_sample of this V2LabRequeueCompact.


        :param bio_sample: The bio_sample of this V2LabRequeueCompact.  # noqa: E501
        :type: V2BiologicalSampleCompact
        """

        self._bio_sample = bio_sample

    @property
    def user_owned_by(self):
        """Gets the user_owned_by of this V2LabRequeueCompact.  # noqa: E501


        :return: The user_owned_by of this V2LabRequeueCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_owned_by

    @user_owned_by.setter
    def user_owned_by(self, user_owned_by):
        """Sets the user_owned_by of this V2LabRequeueCompact.


        :param user_owned_by: The user_owned_by of this V2LabRequeueCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_owned_by = user_owned_by

    @property
    def date_created(self):
        """Gets the date_created of this V2LabRequeueCompact.  # noqa: E501


        :return: The date_created of this V2LabRequeueCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2LabRequeueCompact.


        :param date_created: The date_created of this V2LabRequeueCompact.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V2LabRequeueCompact.  # noqa: E501


        :return: The date_modified of this V2LabRequeueCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V2LabRequeueCompact.


        :param date_modified: The date_modified of this V2LabRequeueCompact.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def requested_additional_yield(self):
        """Gets the requested_additional_yield of this V2LabRequeueCompact.  # noqa: E501


        :return: The requested_additional_yield of this V2LabRequeueCompact.  # noqa: E501
        :rtype: int
        """
        return self._requested_additional_yield

    @requested_additional_yield.setter
    def requested_additional_yield(self, requested_additional_yield):
        """Sets the requested_additional_yield of this V2LabRequeueCompact.


        :param requested_additional_yield: The requested_additional_yield of this V2LabRequeueCompact.  # noqa: E501
        :type: int
        """

        self._requested_additional_yield = requested_additional_yield

    @property
    def matched_yield(self):
        """Gets the matched_yield of this V2LabRequeueCompact.  # noqa: E501


        :return: The matched_yield of this V2LabRequeueCompact.  # noqa: E501
        :rtype: int
        """
        return self._matched_yield

    @matched_yield.setter
    def matched_yield(self, matched_yield):
        """Sets the matched_yield of this V2LabRequeueCompact.


        :param matched_yield: The matched_yield of this V2LabRequeueCompact.  # noqa: E501
        :type: int
        """

        self._matched_yield = matched_yield

    @property
    def missing_yield(self):
        """Gets the missing_yield of this V2LabRequeueCompact.  # noqa: E501


        :return: The missing_yield of this V2LabRequeueCompact.  # noqa: E501
        :rtype: int
        """
        return self._missing_yield

    @missing_yield.setter
    def missing_yield(self, missing_yield):
        """Sets the missing_yield of this V2LabRequeueCompact.


        :param missing_yield: The missing_yield of this V2LabRequeueCompact.  # noqa: E501
        :type: int
        """

        self._missing_yield = missing_yield

    @property
    def limsid(self):
        """Gets the limsid of this V2LabRequeueCompact.  # noqa: E501


        :return: The limsid of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._limsid

    @limsid.setter
    def limsid(self, limsid):
        """Sets the limsid of this V2LabRequeueCompact.


        :param limsid: The limsid of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._limsid = limsid

    @property
    def prep_type(self):
        """Gets the prep_type of this V2LabRequeueCompact.  # noqa: E501


        :return: The prep_type of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._prep_type

    @prep_type.setter
    def prep_type(self, prep_type):
        """Sets the prep_type of this V2LabRequeueCompact.


        :param prep_type: The prep_type of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._prep_type = prep_type

    @property
    def href_sample_library(self):
        """Gets the href_sample_library of this V2LabRequeueCompact.  # noqa: E501


        :return: The href_sample_library of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_sample_library

    @href_sample_library.setter
    def href_sample_library(self, href_sample_library):
        """Sets the href_sample_library of this V2LabRequeueCompact.


        :param href_sample_library: The href_sample_library of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._href_sample_library = href_sample_library

    @property
    def href_library_pool(self):
        """Gets the href_library_pool of this V2LabRequeueCompact.  # noqa: E501


        :return: The href_library_pool of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_library_pool

    @href_library_pool.setter
    def href_library_pool(self, href_library_pool):
        """Sets the href_library_pool of this V2LabRequeueCompact.


        :param href_library_pool: The href_library_pool of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._href_library_pool = href_library_pool

    @property
    def href_prep_request(self):
        """Gets the href_prep_request of this V2LabRequeueCompact.  # noqa: E501


        :return: The href_prep_request of this V2LabRequeueCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_prep_request

    @href_prep_request.setter
    def href_prep_request(self, href_prep_request):
        """Sets the href_prep_request of this V2LabRequeueCompact.


        :param href_prep_request: The href_prep_request of this V2LabRequeueCompact.  # noqa: E501
        :type: str
        """

        self._href_prep_request = href_prep_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2LabRequeueCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2LabRequeueCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
