# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1pre3PropertyOptionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_duplicates': 'bool',
        'ordered': 'bool',
        'allow_array_item_nulls': 'bool'
    }

    attribute_map = {
        'allow_duplicates': 'AllowDuplicates',
        'ordered': 'Ordered',
        'allow_array_item_nulls': 'AllowArrayItemNulls'
    }

    def __init__(self, allow_duplicates=None, ordered=None, allow_array_item_nulls=None):  # noqa: E501
        """V1pre3PropertyOptionsRequest - a model defined in Swagger"""  # noqa: E501
        self._allow_duplicates = None
        self._ordered = None
        self._allow_array_item_nulls = None
        self.discriminator = None
        if allow_duplicates is not None:
            self.allow_duplicates = allow_duplicates
        if ordered is not None:
            self.ordered = ordered
        if allow_array_item_nulls is not None:
            self.allow_array_item_nulls = allow_array_item_nulls

    @property
    def allow_duplicates(self):
        """Gets the allow_duplicates of this V1pre3PropertyOptionsRequest.  # noqa: E501


        :return: The allow_duplicates of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_duplicates

    @allow_duplicates.setter
    def allow_duplicates(self, allow_duplicates):
        """Sets the allow_duplicates of this V1pre3PropertyOptionsRequest.


        :param allow_duplicates: The allow_duplicates of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._allow_duplicates = allow_duplicates

    @property
    def ordered(self):
        """Gets the ordered of this V1pre3PropertyOptionsRequest.  # noqa: E501


        :return: The ordered of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ordered

    @ordered.setter
    def ordered(self, ordered):
        """Sets the ordered of this V1pre3PropertyOptionsRequest.


        :param ordered: The ordered of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._ordered = ordered

    @property
    def allow_array_item_nulls(self):
        """Gets the allow_array_item_nulls of this V1pre3PropertyOptionsRequest.  # noqa: E501


        :return: The allow_array_item_nulls of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_array_item_nulls

    @allow_array_item_nulls.setter
    def allow_array_item_nulls(self, allow_array_item_nulls):
        """Sets the allow_array_item_nulls of this V1pre3PropertyOptionsRequest.


        :param allow_array_item_nulls: The allow_array_item_nulls of this V1pre3PropertyOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._allow_array_item_nulls = allow_array_item_nulls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1pre3PropertyOptionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1pre3PropertyOptionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
