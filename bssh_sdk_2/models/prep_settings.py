# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrepSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'library_prep_name': 'str',
        'protocol_version': 'str',
        'href_default_project': 'str',
        'modules': 'list[PrepModule]'
    }

    attribute_map = {
        'library_prep_name': 'LibraryPrepName',
        'protocol_version': 'ProtocolVersion',
        'href_default_project': 'HrefDefaultProject',
        'modules': 'Modules'
    }

    def __init__(self, library_prep_name=None, protocol_version=None, href_default_project=None, modules=None):  # noqa: E501
        """PrepSettings - a model defined in Swagger"""  # noqa: E501
        self._library_prep_name = None
        self._protocol_version = None
        self._href_default_project = None
        self._modules = None
        self.discriminator = None
        if library_prep_name is not None:
            self.library_prep_name = library_prep_name
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if href_default_project is not None:
            self.href_default_project = href_default_project
        if modules is not None:
            self.modules = modules

    @property
    def library_prep_name(self):
        """Gets the library_prep_name of this PrepSettings.  # noqa: E501


        :return: The library_prep_name of this PrepSettings.  # noqa: E501
        :rtype: str
        """
        return self._library_prep_name

    @library_prep_name.setter
    def library_prep_name(self, library_prep_name):
        """Sets the library_prep_name of this PrepSettings.


        :param library_prep_name: The library_prep_name of this PrepSettings.  # noqa: E501
        :type: str
        """

        self._library_prep_name = library_prep_name

    @property
    def protocol_version(self):
        """Gets the protocol_version of this PrepSettings.  # noqa: E501


        :return: The protocol_version of this PrepSettings.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this PrepSettings.


        :param protocol_version: The protocol_version of this PrepSettings.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def href_default_project(self):
        """Gets the href_default_project of this PrepSettings.  # noqa: E501


        :return: The href_default_project of this PrepSettings.  # noqa: E501
        :rtype: str
        """
        return self._href_default_project

    @href_default_project.setter
    def href_default_project(self, href_default_project):
        """Sets the href_default_project of this PrepSettings.


        :param href_default_project: The href_default_project of this PrepSettings.  # noqa: E501
        :type: str
        """

        self._href_default_project = href_default_project

    @property
    def modules(self):
        """Gets the modules of this PrepSettings.  # noqa: E501


        :return: The modules of this PrepSettings.  # noqa: E501
        :rtype: list[PrepModule]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this PrepSettings.


        :param modules: The modules of this PrepSettings.  # noqa: E501
        :type: list[PrepModule]
        """

        self._modules = modules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrepSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrepSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
