# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PostAppSessionsIdFilesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'directory': 'str',
        'category': 'str',
        'multi_part': 'bool',
        'file_set_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'directory': 'Directory',
        'category': 'Category',
        'multi_part': 'MultiPart',
        'file_set_id': 'FileSetId'
    }

    def __init__(self, name=None, directory=None, category=None, multi_part=None, file_set_id=None):  # noqa: E501
        """V2PostAppSessionsIdFilesRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._directory = None
        self._category = None
        self._multi_part = None
        self._file_set_id = None
        self.discriminator = None
        self.name = name
        self.directory = directory
        self.category = category
        if multi_part is not None:
            self.multi_part = multi_part
        self.file_set_id = file_set_id

    @property
    def name(self):
        """Gets the name of this V2PostAppSessionsIdFilesRequest.  # noqa: E501


        :return: The name of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2PostAppSessionsIdFilesRequest.


        :param name: The name of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def directory(self):
        """Gets the directory of this V2PostAppSessionsIdFilesRequest.  # noqa: E501


        :return: The directory of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this V2PostAppSessionsIdFilesRequest.


        :param directory: The directory of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :type: str
        """
        if directory is None:
            raise ValueError("Invalid value for `directory`, must not be `None`")  # noqa: E501

        self._directory = directory

    @property
    def category(self):
        """Gets the category of this V2PostAppSessionsIdFilesRequest.  # noqa: E501


        :return: The category of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this V2PostAppSessionsIdFilesRequest.


        :param category: The category of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def multi_part(self):
        """Gets the multi_part of this V2PostAppSessionsIdFilesRequest.  # noqa: E501


        :return: The multi_part of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._multi_part

    @multi_part.setter
    def multi_part(self, multi_part):
        """Sets the multi_part of this V2PostAppSessionsIdFilesRequest.


        :param multi_part: The multi_part of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :type: bool
        """

        self._multi_part = multi_part

    @property
    def file_set_id(self):
        """Gets the file_set_id of this V2PostAppSessionsIdFilesRequest.  # noqa: E501


        :return: The file_set_id of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_set_id

    @file_set_id.setter
    def file_set_id(self, file_set_id):
        """Sets the file_set_id of this V2PostAppSessionsIdFilesRequest.


        :param file_set_id: The file_set_id of this V2PostAppSessionsIdFilesRequest.  # noqa: E501
        :type: str
        """
        if file_set_id is None:
            raise ValueError("Invalid value for `file_set_id`, must not be `None`")  # noqa: E501

        self._file_set_id = file_set_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PostAppSessionsIdFilesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PostAppSessionsIdFilesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
