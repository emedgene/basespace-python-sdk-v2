# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1pre3BiologicalSampleCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'user_sample_id': 'str',
        'name': 'str',
        'nucleic_acid': 'str',
        'species': 'Species',
        'project': 'V1pre3ProjectCompact',
        'user_owned_by': 'V1pre3UserCompact',
        'library_count': 'int',
        'date_modified': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'user_sample_id': 'UserSampleId',
        'name': 'Name',
        'nucleic_acid': 'NucleicAcid',
        'species': 'Species',
        'project': 'Project',
        'user_owned_by': 'UserOwnedBy',
        'library_count': 'LibraryCount',
        'date_modified': 'DateModified'
    }

    def __init__(self, id=None, href=None, user_sample_id=None, name=None, nucleic_acid=None, species=None, project=None, user_owned_by=None, library_count=None, date_modified=None):  # noqa: E501
        """V1pre3BiologicalSampleCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._user_sample_id = None
        self._name = None
        self._nucleic_acid = None
        self._species = None
        self._project = None
        self._user_owned_by = None
        self._library_count = None
        self._date_modified = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if user_sample_id is not None:
            self.user_sample_id = user_sample_id
        if name is not None:
            self.name = name
        if nucleic_acid is not None:
            self.nucleic_acid = nucleic_acid
        if species is not None:
            self.species = species
        if project is not None:
            self.project = project
        if user_owned_by is not None:
            self.user_owned_by = user_owned_by
        if library_count is not None:
            self.library_count = library_count
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def id(self):
        """Gets the id of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The id of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1pre3BiologicalSampleCompact.


        :param id: The id of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The href of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V1pre3BiologicalSampleCompact.


        :param href: The href of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def user_sample_id(self):
        """Gets the user_sample_id of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The user_sample_id of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: str
        """
        return self._user_sample_id

    @user_sample_id.setter
    def user_sample_id(self, user_sample_id):
        """Sets the user_sample_id of this V1pre3BiologicalSampleCompact.


        :param user_sample_id: The user_sample_id of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: str
        """

        self._user_sample_id = user_sample_id

    @property
    def name(self):
        """Gets the name of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The name of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1pre3BiologicalSampleCompact.


        :param name: The name of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nucleic_acid(self):
        """Gets the nucleic_acid of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The nucleic_acid of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: str
        """
        return self._nucleic_acid

    @nucleic_acid.setter
    def nucleic_acid(self, nucleic_acid):
        """Sets the nucleic_acid of this V1pre3BiologicalSampleCompact.


        :param nucleic_acid: The nucleic_acid of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: str
        """

        self._nucleic_acid = nucleic_acid

    @property
    def species(self):
        """Gets the species of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The species of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: Species
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this V1pre3BiologicalSampleCompact.


        :param species: The species of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: Species
        """

        self._species = species

    @property
    def project(self):
        """Gets the project of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The project of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: V1pre3ProjectCompact
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1pre3BiologicalSampleCompact.


        :param project: The project of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: V1pre3ProjectCompact
        """

        self._project = project

    @property
    def user_owned_by(self):
        """Gets the user_owned_by of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The user_owned_by of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_owned_by

    @user_owned_by.setter
    def user_owned_by(self, user_owned_by):
        """Sets the user_owned_by of this V1pre3BiologicalSampleCompact.


        :param user_owned_by: The user_owned_by of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_owned_by = user_owned_by

    @property
    def library_count(self):
        """Gets the library_count of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The library_count of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: int
        """
        return self._library_count

    @library_count.setter
    def library_count(self, library_count):
        """Sets the library_count of this V1pre3BiologicalSampleCompact.


        :param library_count: The library_count of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: int
        """

        self._library_count = library_count

    @property
    def date_modified(self):
        """Gets the date_modified of this V1pre3BiologicalSampleCompact.  # noqa: E501


        :return: The date_modified of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V1pre3BiologicalSampleCompact.


        :param date_modified: The date_modified of this V1pre3BiologicalSampleCompact.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1pre3BiologicalSampleCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1pre3BiologicalSampleCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
