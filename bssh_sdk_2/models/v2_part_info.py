# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PartInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part': 'int',
        '_date': 'str',
        'date_time': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'part': 'Part',
        '_date': 'Date',
        'date_time': 'DateTime',
        'signature': 'Signature'
    }

    def __init__(self, part=None, _date=None, date_time=None, signature=None):  # noqa: E501
        """V2PartInfo - a model defined in Swagger"""  # noqa: E501
        self._part = None
        self.__date = None
        self._date_time = None
        self._signature = None
        self.discriminator = None
        if part is not None:
            self.part = part
        if _date is not None:
            self._date = _date
        if date_time is not None:
            self.date_time = date_time
        if signature is not None:
            self.signature = signature

    @property
    def part(self):
        """Gets the part of this V2PartInfo.  # noqa: E501


        :return: The part of this V2PartInfo.  # noqa: E501
        :rtype: int
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this V2PartInfo.


        :param part: The part of this V2PartInfo.  # noqa: E501
        :type: int
        """

        self._part = part

    @property
    def _date(self):
        """Gets the _date of this V2PartInfo.  # noqa: E501


        :return: The _date of this V2PartInfo.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this V2PartInfo.


        :param _date: The _date of this V2PartInfo.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def date_time(self):
        """Gets the date_time of this V2PartInfo.  # noqa: E501


        :return: The date_time of this V2PartInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this V2PartInfo.


        :param date_time: The date_time of this V2PartInfo.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def signature(self):
        """Gets the signature of this V2PartInfo.  # noqa: E501


        :return: The signature of this V2PartInfo.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this V2PartInfo.


        :param signature: The signature of this V2PartInfo.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PartInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PartInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
