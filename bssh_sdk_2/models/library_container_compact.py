# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LibraryContainerCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'container_type': 'str',
        'user_container_id': 'str',
        'library_prep': 'str',
        'library_prep_kit': 'LibraryPrepKitCompact',
        'user_owned_by': 'V1pre3UserCompact',
        'library_count': 'int',
        'date_modified': 'datetime',
        'number_of_samples': 'int',
        'pool_plexity': 'int',
        'prep_run': 'V1pre3RunCompact'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'container_type': 'ContainerType',
        'user_container_id': 'UserContainerId',
        'library_prep': 'LibraryPrep',
        'library_prep_kit': 'LibraryPrepKit',
        'user_owned_by': 'UserOwnedBy',
        'library_count': 'LibraryCount',
        'date_modified': 'DateModified',
        'number_of_samples': 'NumberOfSamples',
        'pool_plexity': 'PoolPlexity',
        'prep_run': 'PrepRun'
    }

    def __init__(self, id=None, href=None, container_type=None, user_container_id=None, library_prep=None, library_prep_kit=None, user_owned_by=None, library_count=None, date_modified=None, number_of_samples=None, pool_plexity=None, prep_run=None):  # noqa: E501
        """LibraryContainerCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._container_type = None
        self._user_container_id = None
        self._library_prep = None
        self._library_prep_kit = None
        self._user_owned_by = None
        self._library_count = None
        self._date_modified = None
        self._number_of_samples = None
        self._pool_plexity = None
        self._prep_run = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if container_type is not None:
            self.container_type = container_type
        if user_container_id is not None:
            self.user_container_id = user_container_id
        if library_prep is not None:
            self.library_prep = library_prep
        if library_prep_kit is not None:
            self.library_prep_kit = library_prep_kit
        if user_owned_by is not None:
            self.user_owned_by = user_owned_by
        if library_count is not None:
            self.library_count = library_count
        if date_modified is not None:
            self.date_modified = date_modified
        if number_of_samples is not None:
            self.number_of_samples = number_of_samples
        if pool_plexity is not None:
            self.pool_plexity = pool_plexity
        if prep_run is not None:
            self.prep_run = prep_run

    @property
    def id(self):
        """Gets the id of this LibraryContainerCompact.  # noqa: E501


        :return: The id of this LibraryContainerCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LibraryContainerCompact.


        :param id: The id of this LibraryContainerCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this LibraryContainerCompact.  # noqa: E501


        :return: The href of this LibraryContainerCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LibraryContainerCompact.


        :param href: The href of this LibraryContainerCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def container_type(self):
        """Gets the container_type of this LibraryContainerCompact.  # noqa: E501


        :return: The container_type of this LibraryContainerCompact.  # noqa: E501
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this LibraryContainerCompact.


        :param container_type: The container_type of this LibraryContainerCompact.  # noqa: E501
        :type: str
        """

        self._container_type = container_type

    @property
    def user_container_id(self):
        """Gets the user_container_id of this LibraryContainerCompact.  # noqa: E501


        :return: The user_container_id of this LibraryContainerCompact.  # noqa: E501
        :rtype: str
        """
        return self._user_container_id

    @user_container_id.setter
    def user_container_id(self, user_container_id):
        """Sets the user_container_id of this LibraryContainerCompact.


        :param user_container_id: The user_container_id of this LibraryContainerCompact.  # noqa: E501
        :type: str
        """

        self._user_container_id = user_container_id

    @property
    def library_prep(self):
        """Gets the library_prep of this LibraryContainerCompact.  # noqa: E501


        :return: The library_prep of this LibraryContainerCompact.  # noqa: E501
        :rtype: str
        """
        return self._library_prep

    @library_prep.setter
    def library_prep(self, library_prep):
        """Sets the library_prep of this LibraryContainerCompact.


        :param library_prep: The library_prep of this LibraryContainerCompact.  # noqa: E501
        :type: str
        """

        self._library_prep = library_prep

    @property
    def library_prep_kit(self):
        """Gets the library_prep_kit of this LibraryContainerCompact.  # noqa: E501


        :return: The library_prep_kit of this LibraryContainerCompact.  # noqa: E501
        :rtype: LibraryPrepKitCompact
        """
        return self._library_prep_kit

    @library_prep_kit.setter
    def library_prep_kit(self, library_prep_kit):
        """Sets the library_prep_kit of this LibraryContainerCompact.


        :param library_prep_kit: The library_prep_kit of this LibraryContainerCompact.  # noqa: E501
        :type: LibraryPrepKitCompact
        """

        self._library_prep_kit = library_prep_kit

    @property
    def user_owned_by(self):
        """Gets the user_owned_by of this LibraryContainerCompact.  # noqa: E501


        :return: The user_owned_by of this LibraryContainerCompact.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_owned_by

    @user_owned_by.setter
    def user_owned_by(self, user_owned_by):
        """Sets the user_owned_by of this LibraryContainerCompact.


        :param user_owned_by: The user_owned_by of this LibraryContainerCompact.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_owned_by = user_owned_by

    @property
    def library_count(self):
        """Gets the library_count of this LibraryContainerCompact.  # noqa: E501


        :return: The library_count of this LibraryContainerCompact.  # noqa: E501
        :rtype: int
        """
        return self._library_count

    @library_count.setter
    def library_count(self, library_count):
        """Sets the library_count of this LibraryContainerCompact.


        :param library_count: The library_count of this LibraryContainerCompact.  # noqa: E501
        :type: int
        """

        self._library_count = library_count

    @property
    def date_modified(self):
        """Gets the date_modified of this LibraryContainerCompact.  # noqa: E501


        :return: The date_modified of this LibraryContainerCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this LibraryContainerCompact.


        :param date_modified: The date_modified of this LibraryContainerCompact.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def number_of_samples(self):
        """Gets the number_of_samples of this LibraryContainerCompact.  # noqa: E501


        :return: The number_of_samples of this LibraryContainerCompact.  # noqa: E501
        :rtype: int
        """
        return self._number_of_samples

    @number_of_samples.setter
    def number_of_samples(self, number_of_samples):
        """Sets the number_of_samples of this LibraryContainerCompact.


        :param number_of_samples: The number_of_samples of this LibraryContainerCompact.  # noqa: E501
        :type: int
        """

        self._number_of_samples = number_of_samples

    @property
    def pool_plexity(self):
        """Gets the pool_plexity of this LibraryContainerCompact.  # noqa: E501


        :return: The pool_plexity of this LibraryContainerCompact.  # noqa: E501
        :rtype: int
        """
        return self._pool_plexity

    @pool_plexity.setter
    def pool_plexity(self, pool_plexity):
        """Sets the pool_plexity of this LibraryContainerCompact.


        :param pool_plexity: The pool_plexity of this LibraryContainerCompact.  # noqa: E501
        :type: int
        """

        self._pool_plexity = pool_plexity

    @property
    def prep_run(self):
        """Gets the prep_run of this LibraryContainerCompact.  # noqa: E501


        :return: The prep_run of this LibraryContainerCompact.  # noqa: E501
        :rtype: V1pre3RunCompact
        """
        return self._prep_run

    @prep_run.setter
    def prep_run(self, prep_run):
        """Sets the prep_run of this LibraryContainerCompact.


        :param prep_run: The prep_run of this LibraryContainerCompact.  # noqa: E501
        :type: V1pre3RunCompact
        """

        self._prep_run = prep_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryContainerCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryContainerCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
