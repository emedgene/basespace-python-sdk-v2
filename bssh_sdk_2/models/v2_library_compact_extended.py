# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2LibraryCompactExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bio_sample_name': 'str',
        'project_name': 'str',
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'status': 'str',
        'bio_sample': 'V2BiologicalSampleCompact',
        'library_prep': 'LibraryPrepKitCompact',
        'project': 'V1pre3ProjectCompact',
        'container': 'LibraryContainerCompact',
        'pools': 'list[V1pre3LibraryPoolCompact]',
        'pool_component_actual_yield_in_bps': 'int',
        'insert_size': 'str',
        'biomolecule': 'str',
        'index1': 'LibraryIndexCompact',
        'index1_sequence': 'str',
        'index2': 'LibraryIndexCompact',
        'index2_sequence': 'str',
        'user_owned_by': 'V1pre3UserCompact'
    }

    attribute_map = {
        'bio_sample_name': 'BioSampleName',
        'project_name': 'ProjectName',
        'id': 'Id',
        'href': 'Href',
        'name': 'Name',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'status': 'Status',
        'bio_sample': 'BioSample',
        'library_prep': 'LibraryPrep',
        'project': 'Project',
        'container': 'Container',
        'pools': 'Pools',
        'pool_component_actual_yield_in_bps': 'PoolComponentActualYieldInBps',
        'insert_size': 'InsertSize',
        'biomolecule': 'Biomolecule',
        'index1': 'Index1',
        'index1_sequence': 'Index1Sequence',
        'index2': 'Index2',
        'index2_sequence': 'Index2Sequence',
        'user_owned_by': 'UserOwnedBy'
    }

    def __init__(self, bio_sample_name=None, project_name=None, id=None, href=None, name=None, date_created=None, date_modified=None, status=None, bio_sample=None, library_prep=None, project=None, container=None, pools=None, pool_component_actual_yield_in_bps=None, insert_size=None, biomolecule=None, index1=None, index1_sequence=None, index2=None, index2_sequence=None, user_owned_by=None):  # noqa: E501
        """V2LibraryCompactExtended - a model defined in Swagger"""  # noqa: E501
        self._bio_sample_name = None
        self._project_name = None
        self._id = None
        self._href = None
        self._name = None
        self._date_created = None
        self._date_modified = None
        self._status = None
        self._bio_sample = None
        self._library_prep = None
        self._project = None
        self._container = None
        self._pools = None
        self._pool_component_actual_yield_in_bps = None
        self._insert_size = None
        self._biomolecule = None
        self._index1 = None
        self._index1_sequence = None
        self._index2 = None
        self._index2_sequence = None
        self._user_owned_by = None
        self.discriminator = None
        if bio_sample_name is not None:
            self.bio_sample_name = bio_sample_name
        if project_name is not None:
            self.project_name = project_name
        self.id = id
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if status is not None:
            self.status = status
        if bio_sample is not None:
            self.bio_sample = bio_sample
        if library_prep is not None:
            self.library_prep = library_prep
        if project is not None:
            self.project = project
        if container is not None:
            self.container = container
        if pools is not None:
            self.pools = pools
        if pool_component_actual_yield_in_bps is not None:
            self.pool_component_actual_yield_in_bps = pool_component_actual_yield_in_bps
        if insert_size is not None:
            self.insert_size = insert_size
        if biomolecule is not None:
            self.biomolecule = biomolecule
        if index1 is not None:
            self.index1 = index1
        if index1_sequence is not None:
            self.index1_sequence = index1_sequence
        if index2 is not None:
            self.index2 = index2
        if index2_sequence is not None:
            self.index2_sequence = index2_sequence
        if user_owned_by is not None:
            self.user_owned_by = user_owned_by

    @property
    def bio_sample_name(self):
        """Gets the bio_sample_name of this V2LibraryCompactExtended.  # noqa: E501


        :return: The bio_sample_name of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._bio_sample_name

    @bio_sample_name.setter
    def bio_sample_name(self, bio_sample_name):
        """Sets the bio_sample_name of this V2LibraryCompactExtended.


        :param bio_sample_name: The bio_sample_name of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._bio_sample_name = bio_sample_name

    @property
    def project_name(self):
        """Gets the project_name of this V2LibraryCompactExtended.  # noqa: E501


        :return: The project_name of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this V2LibraryCompactExtended.


        :param project_name: The project_name of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def id(self):
        """Gets the id of this V2LibraryCompactExtended.  # noqa: E501


        :return: The id of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2LibraryCompactExtended.


        :param id: The id of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2LibraryCompactExtended.  # noqa: E501


        :return: The href of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2LibraryCompactExtended.


        :param href: The href of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this V2LibraryCompactExtended.  # noqa: E501


        :return: The name of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2LibraryCompactExtended.


        :param name: The name of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def date_created(self):
        """Gets the date_created of this V2LibraryCompactExtended.  # noqa: E501


        :return: The date_created of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2LibraryCompactExtended.


        :param date_created: The date_created of this V2LibraryCompactExtended.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this V2LibraryCompactExtended.  # noqa: E501


        :return: The date_modified of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this V2LibraryCompactExtended.


        :param date_modified: The date_modified of this V2LibraryCompactExtended.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def status(self):
        """Gets the status of this V2LibraryCompactExtended.  # noqa: E501


        :return: The status of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2LibraryCompactExtended.


        :param status: The status of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def bio_sample(self):
        """Gets the bio_sample of this V2LibraryCompactExtended.  # noqa: E501


        :return: The bio_sample of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: V2BiologicalSampleCompact
        """
        return self._bio_sample

    @bio_sample.setter
    def bio_sample(self, bio_sample):
        """Sets the bio_sample of this V2LibraryCompactExtended.


        :param bio_sample: The bio_sample of this V2LibraryCompactExtended.  # noqa: E501
        :type: V2BiologicalSampleCompact
        """

        self._bio_sample = bio_sample

    @property
    def library_prep(self):
        """Gets the library_prep of this V2LibraryCompactExtended.  # noqa: E501


        :return: The library_prep of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: LibraryPrepKitCompact
        """
        return self._library_prep

    @library_prep.setter
    def library_prep(self, library_prep):
        """Sets the library_prep of this V2LibraryCompactExtended.


        :param library_prep: The library_prep of this V2LibraryCompactExtended.  # noqa: E501
        :type: LibraryPrepKitCompact
        """

        self._library_prep = library_prep

    @property
    def project(self):
        """Gets the project of this V2LibraryCompactExtended.  # noqa: E501


        :return: The project of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: V1pre3ProjectCompact
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V2LibraryCompactExtended.


        :param project: The project of this V2LibraryCompactExtended.  # noqa: E501
        :type: V1pre3ProjectCompact
        """

        self._project = project

    @property
    def container(self):
        """Gets the container of this V2LibraryCompactExtended.  # noqa: E501


        :return: The container of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: LibraryContainerCompact
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V2LibraryCompactExtended.


        :param container: The container of this V2LibraryCompactExtended.  # noqa: E501
        :type: LibraryContainerCompact
        """

        self._container = container

    @property
    def pools(self):
        """Gets the pools of this V2LibraryCompactExtended.  # noqa: E501


        :return: The pools of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: list[V1pre3LibraryPoolCompact]
        """
        return self._pools

    @pools.setter
    def pools(self, pools):
        """Sets the pools of this V2LibraryCompactExtended.


        :param pools: The pools of this V2LibraryCompactExtended.  # noqa: E501
        :type: list[V1pre3LibraryPoolCompact]
        """

        self._pools = pools

    @property
    def pool_component_actual_yield_in_bps(self):
        """Gets the pool_component_actual_yield_in_bps of this V2LibraryCompactExtended.  # noqa: E501


        :return: The pool_component_actual_yield_in_bps of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: int
        """
        return self._pool_component_actual_yield_in_bps

    @pool_component_actual_yield_in_bps.setter
    def pool_component_actual_yield_in_bps(self, pool_component_actual_yield_in_bps):
        """Sets the pool_component_actual_yield_in_bps of this V2LibraryCompactExtended.


        :param pool_component_actual_yield_in_bps: The pool_component_actual_yield_in_bps of this V2LibraryCompactExtended.  # noqa: E501
        :type: int
        """

        self._pool_component_actual_yield_in_bps = pool_component_actual_yield_in_bps

    @property
    def insert_size(self):
        """Gets the insert_size of this V2LibraryCompactExtended.  # noqa: E501


        :return: The insert_size of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._insert_size

    @insert_size.setter
    def insert_size(self, insert_size):
        """Sets the insert_size of this V2LibraryCompactExtended.


        :param insert_size: The insert_size of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._insert_size = insert_size

    @property
    def biomolecule(self):
        """Gets the biomolecule of this V2LibraryCompactExtended.  # noqa: E501


        :return: The biomolecule of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._biomolecule

    @biomolecule.setter
    def biomolecule(self, biomolecule):
        """Sets the biomolecule of this V2LibraryCompactExtended.


        :param biomolecule: The biomolecule of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._biomolecule = biomolecule

    @property
    def index1(self):
        """Gets the index1 of this V2LibraryCompactExtended.  # noqa: E501


        :return: The index1 of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: LibraryIndexCompact
        """
        return self._index1

    @index1.setter
    def index1(self, index1):
        """Sets the index1 of this V2LibraryCompactExtended.


        :param index1: The index1 of this V2LibraryCompactExtended.  # noqa: E501
        :type: LibraryIndexCompact
        """

        self._index1 = index1

    @property
    def index1_sequence(self):
        """Gets the index1_sequence of this V2LibraryCompactExtended.  # noqa: E501


        :return: The index1_sequence of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._index1_sequence

    @index1_sequence.setter
    def index1_sequence(self, index1_sequence):
        """Sets the index1_sequence of this V2LibraryCompactExtended.


        :param index1_sequence: The index1_sequence of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._index1_sequence = index1_sequence

    @property
    def index2(self):
        """Gets the index2 of this V2LibraryCompactExtended.  # noqa: E501


        :return: The index2 of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: LibraryIndexCompact
        """
        return self._index2

    @index2.setter
    def index2(self, index2):
        """Sets the index2 of this V2LibraryCompactExtended.


        :param index2: The index2 of this V2LibraryCompactExtended.  # noqa: E501
        :type: LibraryIndexCompact
        """

        self._index2 = index2

    @property
    def index2_sequence(self):
        """Gets the index2_sequence of this V2LibraryCompactExtended.  # noqa: E501


        :return: The index2_sequence of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: str
        """
        return self._index2_sequence

    @index2_sequence.setter
    def index2_sequence(self, index2_sequence):
        """Sets the index2_sequence of this V2LibraryCompactExtended.


        :param index2_sequence: The index2_sequence of this V2LibraryCompactExtended.  # noqa: E501
        :type: str
        """

        self._index2_sequence = index2_sequence

    @property
    def user_owned_by(self):
        """Gets the user_owned_by of this V2LibraryCompactExtended.  # noqa: E501


        :return: The user_owned_by of this V2LibraryCompactExtended.  # noqa: E501
        :rtype: V1pre3UserCompact
        """
        return self._user_owned_by

    @user_owned_by.setter
    def user_owned_by(self, user_owned_by):
        """Sets the user_owned_by of this V2LibraryCompactExtended.


        :param user_owned_by: The user_owned_by of this V2LibraryCompactExtended.  # noqa: E501
        :type: V1pre3UserCompact
        """

        self._user_owned_by = user_owned_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2LibraryCompactExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2LibraryCompactExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
