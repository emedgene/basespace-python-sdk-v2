# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DateTimeOffset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'now': 'DateTimeOffset',
        'utc_now': 'DateTimeOffset',
        'date_time': 'datetime',
        'utc_date_time': 'datetime',
        'local_date_time': 'datetime',
        '_date': 'datetime',
        'day': 'int',
        'day_of_week': 'str',
        'day_of_year': 'int',
        'hour': 'int',
        'millisecond': 'int',
        'minute': 'int',
        'month': 'int',
        'offset': 'TimeSpan',
        'second': 'int',
        'ticks': 'int',
        'utc_ticks': 'int',
        'time_of_day': 'TimeSpan',
        'year': 'int'
    }

    attribute_map = {
        'now': 'Now',
        'utc_now': 'UtcNow',
        'date_time': 'DateTime',
        'utc_date_time': 'UtcDateTime',
        'local_date_time': 'LocalDateTime',
        '_date': 'Date',
        'day': 'Day',
        'day_of_week': 'DayOfWeek',
        'day_of_year': 'DayOfYear',
        'hour': 'Hour',
        'millisecond': 'Millisecond',
        'minute': 'Minute',
        'month': 'Month',
        'offset': 'Offset',
        'second': 'Second',
        'ticks': 'Ticks',
        'utc_ticks': 'UtcTicks',
        'time_of_day': 'TimeOfDay',
        'year': 'Year'
    }

    def __init__(self, now=None, utc_now=None, date_time=None, utc_date_time=None, local_date_time=None, _date=None, day=None, day_of_week=None, day_of_year=None, hour=None, millisecond=None, minute=None, month=None, offset=None, second=None, ticks=None, utc_ticks=None, time_of_day=None, year=None):  # noqa: E501
        """DateTimeOffset - a model defined in Swagger"""  # noqa: E501
        self._now = None
        self._utc_now = None
        self._date_time = None
        self._utc_date_time = None
        self._local_date_time = None
        self.__date = None
        self._day = None
        self._day_of_week = None
        self._day_of_year = None
        self._hour = None
        self._millisecond = None
        self._minute = None
        self._month = None
        self._offset = None
        self._second = None
        self._ticks = None
        self._utc_ticks = None
        self._time_of_day = None
        self._year = None
        self.discriminator = None
        self.now = now
        self.utc_now = utc_now
        self.date_time = date_time
        self.utc_date_time = utc_date_time
        self.local_date_time = local_date_time
        self._date = _date
        self.day = day
        self.day_of_week = day_of_week
        self.day_of_year = day_of_year
        self.hour = hour
        self.millisecond = millisecond
        self.minute = minute
        self.month = month
        self.offset = offset
        self.second = second
        self.ticks = ticks
        self.utc_ticks = utc_ticks
        self.time_of_day = time_of_day
        self.year = year

    @property
    def now(self):
        """Gets the now of this DateTimeOffset.  # noqa: E501


        :return: The now of this DateTimeOffset.  # noqa: E501
        :rtype: DateTimeOffset
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this DateTimeOffset.


        :param now: The now of this DateTimeOffset.  # noqa: E501
        :type: DateTimeOffset
        """
        if now is None:
            raise ValueError("Invalid value for `now`, must not be `None`")  # noqa: E501

        self._now = now

    @property
    def utc_now(self):
        """Gets the utc_now of this DateTimeOffset.  # noqa: E501


        :return: The utc_now of this DateTimeOffset.  # noqa: E501
        :rtype: DateTimeOffset
        """
        return self._utc_now

    @utc_now.setter
    def utc_now(self, utc_now):
        """Sets the utc_now of this DateTimeOffset.


        :param utc_now: The utc_now of this DateTimeOffset.  # noqa: E501
        :type: DateTimeOffset
        """
        if utc_now is None:
            raise ValueError("Invalid value for `utc_now`, must not be `None`")  # noqa: E501

        self._utc_now = utc_now

    @property
    def date_time(self):
        """Gets the date_time of this DateTimeOffset.  # noqa: E501


        :return: The date_time of this DateTimeOffset.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this DateTimeOffset.


        :param date_time: The date_time of this DateTimeOffset.  # noqa: E501
        :type: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def utc_date_time(self):
        """Gets the utc_date_time of this DateTimeOffset.  # noqa: E501


        :return: The utc_date_time of this DateTimeOffset.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_date_time

    @utc_date_time.setter
    def utc_date_time(self, utc_date_time):
        """Sets the utc_date_time of this DateTimeOffset.


        :param utc_date_time: The utc_date_time of this DateTimeOffset.  # noqa: E501
        :type: datetime
        """
        if utc_date_time is None:
            raise ValueError("Invalid value for `utc_date_time`, must not be `None`")  # noqa: E501

        self._utc_date_time = utc_date_time

    @property
    def local_date_time(self):
        """Gets the local_date_time of this DateTimeOffset.  # noqa: E501


        :return: The local_date_time of this DateTimeOffset.  # noqa: E501
        :rtype: datetime
        """
        return self._local_date_time

    @local_date_time.setter
    def local_date_time(self, local_date_time):
        """Sets the local_date_time of this DateTimeOffset.


        :param local_date_time: The local_date_time of this DateTimeOffset.  # noqa: E501
        :type: datetime
        """
        if local_date_time is None:
            raise ValueError("Invalid value for `local_date_time`, must not be `None`")  # noqa: E501

        self._local_date_time = local_date_time

    @property
    def _date(self):
        """Gets the _date of this DateTimeOffset.  # noqa: E501


        :return: The _date of this DateTimeOffset.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DateTimeOffset.


        :param _date: The _date of this DateTimeOffset.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def day(self):
        """Gets the day of this DateTimeOffset.  # noqa: E501


        :return: The day of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DateTimeOffset.


        :param day: The day of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501

        self._day = day

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DateTimeOffset.  # noqa: E501


        :return: The day_of_week of this DateTimeOffset.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DateTimeOffset.


        :param day_of_week: The day_of_week of this DateTimeOffset.  # noqa: E501
        :type: str
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")  # noqa: E501
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"  # noqa: E501
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def day_of_year(self):
        """Gets the day_of_year of this DateTimeOffset.  # noqa: E501


        :return: The day_of_year of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._day_of_year

    @day_of_year.setter
    def day_of_year(self, day_of_year):
        """Sets the day_of_year of this DateTimeOffset.


        :param day_of_year: The day_of_year of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if day_of_year is None:
            raise ValueError("Invalid value for `day_of_year`, must not be `None`")  # noqa: E501

        self._day_of_year = day_of_year

    @property
    def hour(self):
        """Gets the hour of this DateTimeOffset.  # noqa: E501


        :return: The hour of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this DateTimeOffset.


        :param hour: The hour of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")  # noqa: E501

        self._hour = hour

    @property
    def millisecond(self):
        """Gets the millisecond of this DateTimeOffset.  # noqa: E501


        :return: The millisecond of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._millisecond

    @millisecond.setter
    def millisecond(self, millisecond):
        """Sets the millisecond of this DateTimeOffset.


        :param millisecond: The millisecond of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if millisecond is None:
            raise ValueError("Invalid value for `millisecond`, must not be `None`")  # noqa: E501

        self._millisecond = millisecond

    @property
    def minute(self):
        """Gets the minute of this DateTimeOffset.  # noqa: E501


        :return: The minute of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this DateTimeOffset.


        :param minute: The minute of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if minute is None:
            raise ValueError("Invalid value for `minute`, must not be `None`")  # noqa: E501

        self._minute = minute

    @property
    def month(self):
        """Gets the month of this DateTimeOffset.  # noqa: E501


        :return: The month of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DateTimeOffset.


        :param month: The month of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def offset(self):
        """Gets the offset of this DateTimeOffset.  # noqa: E501


        :return: The offset of this DateTimeOffset.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DateTimeOffset.


        :param offset: The offset of this DateTimeOffset.  # noqa: E501
        :type: TimeSpan
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def second(self):
        """Gets the second of this DateTimeOffset.  # noqa: E501


        :return: The second of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this DateTimeOffset.


        :param second: The second of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second

    @property
    def ticks(self):
        """Gets the ticks of this DateTimeOffset.  # noqa: E501


        :return: The ticks of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._ticks

    @ticks.setter
    def ticks(self, ticks):
        """Sets the ticks of this DateTimeOffset.


        :param ticks: The ticks of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if ticks is None:
            raise ValueError("Invalid value for `ticks`, must not be `None`")  # noqa: E501

        self._ticks = ticks

    @property
    def utc_ticks(self):
        """Gets the utc_ticks of this DateTimeOffset.  # noqa: E501


        :return: The utc_ticks of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._utc_ticks

    @utc_ticks.setter
    def utc_ticks(self, utc_ticks):
        """Sets the utc_ticks of this DateTimeOffset.


        :param utc_ticks: The utc_ticks of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if utc_ticks is None:
            raise ValueError("Invalid value for `utc_ticks`, must not be `None`")  # noqa: E501

        self._utc_ticks = utc_ticks

    @property
    def time_of_day(self):
        """Gets the time_of_day of this DateTimeOffset.  # noqa: E501


        :return: The time_of_day of this DateTimeOffset.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this DateTimeOffset.


        :param time_of_day: The time_of_day of this DateTimeOffset.  # noqa: E501
        :type: TimeSpan
        """
        if time_of_day is None:
            raise ValueError("Invalid value for `time_of_day`, must not be `None`")  # noqa: E501

        self._time_of_day = time_of_day

    @property
    def year(self):
        """Gets the year of this DateTimeOffset.  # noqa: E501


        :return: The year of this DateTimeOffset.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DateTimeOffset.


        :param year: The year of this DateTimeOffset.  # noqa: E501
        :type: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateTimeOffset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeOffset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
