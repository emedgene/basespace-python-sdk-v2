# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2UserCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'date_created': 'datetime',
        'gravatar_url': 'str',
        'href_properties': 'str',
        'domain_name': 'str',
        'external_domain_id': 'str',
        'platform_id': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'name': 'Name',
        'date_created': 'DateCreated',
        'gravatar_url': 'GravatarUrl',
        'href_properties': 'HrefProperties',
        'domain_name': 'DomainName',
        'external_domain_id': 'ExternalDomainId',
        'platform_id': 'PlatformId'
    }

    def __init__(self, id=None, href=None, name=None, date_created=None, gravatar_url=None, href_properties=None, domain_name=None, external_domain_id=None, platform_id=None):  # noqa: E501
        """V2UserCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._date_created = None
        self._gravatar_url = None
        self._href_properties = None
        self._domain_name = None
        self._external_domain_id = None
        self._platform_id = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if date_created is not None:
            self.date_created = date_created
        if gravatar_url is not None:
            self.gravatar_url = gravatar_url
        if href_properties is not None:
            self.href_properties = href_properties
        if domain_name is not None:
            self.domain_name = domain_name
        if external_domain_id is not None:
            self.external_domain_id = external_domain_id
        if platform_id is not None:
            self.platform_id = platform_id

    @property
    def id(self):
        """Gets the id of this V2UserCompact.  # noqa: E501


        :return: The id of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2UserCompact.


        :param id: The id of this V2UserCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2UserCompact.  # noqa: E501


        :return: The href of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2UserCompact.


        :param href: The href of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this V2UserCompact.  # noqa: E501


        :return: The name of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2UserCompact.


        :param name: The name of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def date_created(self):
        """Gets the date_created of this V2UserCompact.  # noqa: E501


        :return: The date_created of this V2UserCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this V2UserCompact.


        :param date_created: The date_created of this V2UserCompact.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def gravatar_url(self):
        """Gets the gravatar_url of this V2UserCompact.  # noqa: E501


        :return: The gravatar_url of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_url

    @gravatar_url.setter
    def gravatar_url(self, gravatar_url):
        """Sets the gravatar_url of this V2UserCompact.


        :param gravatar_url: The gravatar_url of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._gravatar_url = gravatar_url

    @property
    def href_properties(self):
        """Gets the href_properties of this V2UserCompact.  # noqa: E501


        :return: The href_properties of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_properties

    @href_properties.setter
    def href_properties(self, href_properties):
        """Sets the href_properties of this V2UserCompact.


        :param href_properties: The href_properties of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._href_properties = href_properties

    @property
    def domain_name(self):
        """Gets the domain_name of this V2UserCompact.  # noqa: E501


        :return: The domain_name of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this V2UserCompact.


        :param domain_name: The domain_name of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def external_domain_id(self):
        """Gets the external_domain_id of this V2UserCompact.  # noqa: E501


        :return: The external_domain_id of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._external_domain_id

    @external_domain_id.setter
    def external_domain_id(self, external_domain_id):
        """Sets the external_domain_id of this V2UserCompact.


        :param external_domain_id: The external_domain_id of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._external_domain_id = external_domain_id

    @property
    def platform_id(self):
        """Gets the platform_id of this V2UserCompact.  # noqa: E501


        :return: The platform_id of this V2UserCompact.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this V2UserCompact.


        :param platform_id: The platform_id of this V2UserCompact.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2UserCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2UserCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
