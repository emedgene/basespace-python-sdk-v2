# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2BiologicalSampleLibraryYield(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'library_prep': 'LibraryPrepKitCompact',
        'total_expected_yield': 'int',
        'total_actual_yield': 'int',
        'total_fastq_datasets': 'int',
        'total_lanes': 'int'
    }

    attribute_map = {
        'library_prep': 'LibraryPrep',
        'total_expected_yield': 'TotalExpectedYield',
        'total_actual_yield': 'TotalActualYield',
        'total_fastq_datasets': 'TotalFastqDatasets',
        'total_lanes': 'TotalLanes'
    }

    def __init__(self, library_prep=None, total_expected_yield=None, total_actual_yield=None, total_fastq_datasets=None, total_lanes=None):  # noqa: E501
        """V2BiologicalSampleLibraryYield - a model defined in Swagger"""  # noqa: E501
        self._library_prep = None
        self._total_expected_yield = None
        self._total_actual_yield = None
        self._total_fastq_datasets = None
        self._total_lanes = None
        self.discriminator = None
        if library_prep is not None:
            self.library_prep = library_prep
        if total_expected_yield is not None:
            self.total_expected_yield = total_expected_yield
        if total_actual_yield is not None:
            self.total_actual_yield = total_actual_yield
        if total_fastq_datasets is not None:
            self.total_fastq_datasets = total_fastq_datasets
        if total_lanes is not None:
            self.total_lanes = total_lanes

    @property
    def library_prep(self):
        """Gets the library_prep of this V2BiologicalSampleLibraryYield.  # noqa: E501


        :return: The library_prep of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :rtype: LibraryPrepKitCompact
        """
        return self._library_prep

    @library_prep.setter
    def library_prep(self, library_prep):
        """Sets the library_prep of this V2BiologicalSampleLibraryYield.


        :param library_prep: The library_prep of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :type: LibraryPrepKitCompact
        """

        self._library_prep = library_prep

    @property
    def total_expected_yield(self):
        """Gets the total_expected_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501


        :return: The total_expected_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :rtype: int
        """
        return self._total_expected_yield

    @total_expected_yield.setter
    def total_expected_yield(self, total_expected_yield):
        """Sets the total_expected_yield of this V2BiologicalSampleLibraryYield.


        :param total_expected_yield: The total_expected_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :type: int
        """

        self._total_expected_yield = total_expected_yield

    @property
    def total_actual_yield(self):
        """Gets the total_actual_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501


        :return: The total_actual_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :rtype: int
        """
        return self._total_actual_yield

    @total_actual_yield.setter
    def total_actual_yield(self, total_actual_yield):
        """Sets the total_actual_yield of this V2BiologicalSampleLibraryYield.


        :param total_actual_yield: The total_actual_yield of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :type: int
        """

        self._total_actual_yield = total_actual_yield

    @property
    def total_fastq_datasets(self):
        """Gets the total_fastq_datasets of this V2BiologicalSampleLibraryYield.  # noqa: E501


        :return: The total_fastq_datasets of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :rtype: int
        """
        return self._total_fastq_datasets

    @total_fastq_datasets.setter
    def total_fastq_datasets(self, total_fastq_datasets):
        """Sets the total_fastq_datasets of this V2BiologicalSampleLibraryYield.


        :param total_fastq_datasets: The total_fastq_datasets of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :type: int
        """

        self._total_fastq_datasets = total_fastq_datasets

    @property
    def total_lanes(self):
        """Gets the total_lanes of this V2BiologicalSampleLibraryYield.  # noqa: E501


        :return: The total_lanes of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :rtype: int
        """
        return self._total_lanes

    @total_lanes.setter
    def total_lanes(self, total_lanes):
        """Sets the total_lanes of this V2BiologicalSampleLibraryYield.


        :param total_lanes: The total_lanes of this V2BiologicalSampleLibraryYield.  # noqa: E501
        :type: int
        """

        self._total_lanes = total_lanes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2BiologicalSampleLibraryYield, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2BiologicalSampleLibraryYield):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
