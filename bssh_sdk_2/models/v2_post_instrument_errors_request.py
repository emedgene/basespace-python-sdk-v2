# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PostInstrumentErrorsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'int',
        'error_code': 'str',
        'context': 'str',
        'description': 'str',
        'details': 'str',
        'language': 'str',
        'severity': 'str',
        'software_version': 'str',
        'instrument_mode': 'str'
    }

    attribute_map = {
        'run_id': 'RunId',
        'error_code': 'ErrorCode',
        'context': 'Context',
        'description': 'Description',
        'details': 'Details',
        'language': 'Language',
        'severity': 'Severity',
        'software_version': 'SoftwareVersion',
        'instrument_mode': 'InstrumentMode'
    }

    def __init__(self, run_id=None, error_code=None, context=None, description=None, details=None, language=None, severity=None, software_version=None, instrument_mode=None):  # noqa: E501
        """V2PostInstrumentErrorsRequest - a model defined in Swagger"""  # noqa: E501
        self._run_id = None
        self._error_code = None
        self._context = None
        self._description = None
        self._details = None
        self._language = None
        self._severity = None
        self._software_version = None
        self._instrument_mode = None
        self.discriminator = None
        if run_id is not None:
            self.run_id = run_id
        self.error_code = error_code
        self.context = context
        self.description = description
        self.details = details
        self.language = language
        self.severity = severity
        self.software_version = software_version
        self.instrument_mode = instrument_mode

    @property
    def run_id(self):
        """Gets the run_id of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The run_id of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this V2PostInstrumentErrorsRequest.


        :param run_id: The run_id of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def error_code(self):
        """Gets the error_code of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The error_code of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this V2PostInstrumentErrorsRequest.


        :param error_code: The error_code of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def context(self):
        """Gets the context of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The context of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this V2PostInstrumentErrorsRequest.


        :param context: The context of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def description(self):
        """Gets the description of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The description of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2PostInstrumentErrorsRequest.


        :param description: The description of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def details(self):
        """Gets the details of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The details of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this V2PostInstrumentErrorsRequest.


        :param details: The details of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def language(self):
        """Gets the language of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The language of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this V2PostInstrumentErrorsRequest.


        :param language: The language of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def severity(self):
        """Gets the severity of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The severity of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this V2PostInstrumentErrorsRequest.


        :param severity: The severity of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def software_version(self):
        """Gets the software_version of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The software_version of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this V2PostInstrumentErrorsRequest.


        :param software_version: The software_version of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if software_version is None:
            raise ValueError("Invalid value for `software_version`, must not be `None`")  # noqa: E501

        self._software_version = software_version

    @property
    def instrument_mode(self):
        """Gets the instrument_mode of this V2PostInstrumentErrorsRequest.  # noqa: E501


        :return: The instrument_mode of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_mode

    @instrument_mode.setter
    def instrument_mode(self, instrument_mode):
        """Sets the instrument_mode of this V2PostInstrumentErrorsRequest.


        :param instrument_mode: The instrument_mode of this V2PostInstrumentErrorsRequest.  # noqa: E501
        :type: str
        """
        if instrument_mode is None:
            raise ValueError("Invalid value for `instrument_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "RUO", "DX"]  # noqa: E501
        if instrument_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_mode, allowed_values)
            )

        self._instrument_mode = instrument_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PostInstrumentErrorsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PostInstrumentErrorsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
