# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lane(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'density': 'float',
        'error_rate': 'float',
        'error_rate100': 'float',
        'error_rate35': 'float',
        'error_rate50': 'float',
        'error_rate75': 'float',
        'intensity_cycle1': 'float',
        'lane_number': 'int',
        'max_cycle_called': 'int',
        'max_projected_yield_in_gbp': 'float',
        'percent_aligned': 'float',
        'percent_gt_q30': 'float',
        'percent_gt_q30_last10_cycles': 'float',
        'percent_pf': 'float',
        'phasing': 'float',
        'pre_phasing': 'float',
        'projected_yield_in_gbp': 'float',
        'reads': 'int',
        'reads_pf': 'int',
        'status': 'str',
        '_yield': 'float',
        'href_comments': 'str',
        'contains_comments': 'bool',
        'href_lane_sequencing_stats': 'str',
        'phasing_slope': 'float',
        'phasing_offset': 'float',
        'pre_phasing_slope': 'float',
        'pre_phasing_offset': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'density': 'Density',
        'error_rate': 'ErrorRate',
        'error_rate100': 'ErrorRate100',
        'error_rate35': 'ErrorRate35',
        'error_rate50': 'ErrorRate50',
        'error_rate75': 'ErrorRate75',
        'intensity_cycle1': 'IntensityCycle1',
        'lane_number': 'LaneNumber',
        'max_cycle_called': 'MaxCycleCalled',
        'max_projected_yield_in_gbp': 'MaxProjectedYieldInGbp',
        'percent_aligned': 'PercentAligned',
        'percent_gt_q30': 'PercentGtQ30',
        'percent_gt_q30_last10_cycles': 'PercentGtQ30Last10Cycles',
        'percent_pf': 'PercentPf',
        'phasing': 'Phasing',
        'pre_phasing': 'PrePhasing',
        'projected_yield_in_gbp': 'ProjectedYieldInGbp',
        'reads': 'Reads',
        'reads_pf': 'ReadsPf',
        'status': 'Status',
        '_yield': 'Yield',
        'href_comments': 'HrefComments',
        'contains_comments': 'ContainsComments',
        'href_lane_sequencing_stats': 'HrefLaneSequencingStats',
        'phasing_slope': 'PhasingSlope',
        'phasing_offset': 'PhasingOffset',
        'pre_phasing_slope': 'PrePhasingSlope',
        'pre_phasing_offset': 'PrePhasingOffset'
    }

    def __init__(self, id=None, href=None, density=None, error_rate=None, error_rate100=None, error_rate35=None, error_rate50=None, error_rate75=None, intensity_cycle1=None, lane_number=None, max_cycle_called=None, max_projected_yield_in_gbp=None, percent_aligned=None, percent_gt_q30=None, percent_gt_q30_last10_cycles=None, percent_pf=None, phasing=None, pre_phasing=None, projected_yield_in_gbp=None, reads=None, reads_pf=None, status=None, _yield=None, href_comments=None, contains_comments=None, href_lane_sequencing_stats=None, phasing_slope=None, phasing_offset=None, pre_phasing_slope=None, pre_phasing_offset=None):  # noqa: E501
        """Lane - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._density = None
        self._error_rate = None
        self._error_rate100 = None
        self._error_rate35 = None
        self._error_rate50 = None
        self._error_rate75 = None
        self._intensity_cycle1 = None
        self._lane_number = None
        self._max_cycle_called = None
        self._max_projected_yield_in_gbp = None
        self._percent_aligned = None
        self._percent_gt_q30 = None
        self._percent_gt_q30_last10_cycles = None
        self._percent_pf = None
        self._phasing = None
        self._pre_phasing = None
        self._projected_yield_in_gbp = None
        self._reads = None
        self._reads_pf = None
        self._status = None
        self.__yield = None
        self._href_comments = None
        self._contains_comments = None
        self._href_lane_sequencing_stats = None
        self._phasing_slope = None
        self._phasing_offset = None
        self._pre_phasing_slope = None
        self._pre_phasing_offset = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if density is not None:
            self.density = density
        if error_rate is not None:
            self.error_rate = error_rate
        if error_rate100 is not None:
            self.error_rate100 = error_rate100
        if error_rate35 is not None:
            self.error_rate35 = error_rate35
        if error_rate50 is not None:
            self.error_rate50 = error_rate50
        if error_rate75 is not None:
            self.error_rate75 = error_rate75
        if intensity_cycle1 is not None:
            self.intensity_cycle1 = intensity_cycle1
        if lane_number is not None:
            self.lane_number = lane_number
        if max_cycle_called is not None:
            self.max_cycle_called = max_cycle_called
        if max_projected_yield_in_gbp is not None:
            self.max_projected_yield_in_gbp = max_projected_yield_in_gbp
        if percent_aligned is not None:
            self.percent_aligned = percent_aligned
        if percent_gt_q30 is not None:
            self.percent_gt_q30 = percent_gt_q30
        if percent_gt_q30_last10_cycles is not None:
            self.percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles
        if percent_pf is not None:
            self.percent_pf = percent_pf
        if phasing is not None:
            self.phasing = phasing
        if pre_phasing is not None:
            self.pre_phasing = pre_phasing
        if projected_yield_in_gbp is not None:
            self.projected_yield_in_gbp = projected_yield_in_gbp
        if reads is not None:
            self.reads = reads
        if reads_pf is not None:
            self.reads_pf = reads_pf
        if status is not None:
            self.status = status
        if _yield is not None:
            self._yield = _yield
        if href_comments is not None:
            self.href_comments = href_comments
        if contains_comments is not None:
            self.contains_comments = contains_comments
        if href_lane_sequencing_stats is not None:
            self.href_lane_sequencing_stats = href_lane_sequencing_stats
        if phasing_slope is not None:
            self.phasing_slope = phasing_slope
        if phasing_offset is not None:
            self.phasing_offset = phasing_offset
        if pre_phasing_slope is not None:
            self.pre_phasing_slope = pre_phasing_slope
        if pre_phasing_offset is not None:
            self.pre_phasing_offset = pre_phasing_offset

    @property
    def id(self):
        """Gets the id of this Lane.  # noqa: E501


        :return: The id of this Lane.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lane.


        :param id: The id of this Lane.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Lane.  # noqa: E501


        :return: The href of this Lane.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Lane.


        :param href: The href of this Lane.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def density(self):
        """Gets the density of this Lane.  # noqa: E501


        :return: The density of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this Lane.


        :param density: The density of this Lane.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def error_rate(self):
        """Gets the error_rate of this Lane.  # noqa: E501


        :return: The error_rate of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this Lane.


        :param error_rate: The error_rate of this Lane.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def error_rate100(self):
        """Gets the error_rate100 of this Lane.  # noqa: E501


        :return: The error_rate100 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._error_rate100

    @error_rate100.setter
    def error_rate100(self, error_rate100):
        """Sets the error_rate100 of this Lane.


        :param error_rate100: The error_rate100 of this Lane.  # noqa: E501
        :type: float
        """

        self._error_rate100 = error_rate100

    @property
    def error_rate35(self):
        """Gets the error_rate35 of this Lane.  # noqa: E501


        :return: The error_rate35 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._error_rate35

    @error_rate35.setter
    def error_rate35(self, error_rate35):
        """Sets the error_rate35 of this Lane.


        :param error_rate35: The error_rate35 of this Lane.  # noqa: E501
        :type: float
        """

        self._error_rate35 = error_rate35

    @property
    def error_rate50(self):
        """Gets the error_rate50 of this Lane.  # noqa: E501


        :return: The error_rate50 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._error_rate50

    @error_rate50.setter
    def error_rate50(self, error_rate50):
        """Sets the error_rate50 of this Lane.


        :param error_rate50: The error_rate50 of this Lane.  # noqa: E501
        :type: float
        """

        self._error_rate50 = error_rate50

    @property
    def error_rate75(self):
        """Gets the error_rate75 of this Lane.  # noqa: E501


        :return: The error_rate75 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._error_rate75

    @error_rate75.setter
    def error_rate75(self, error_rate75):
        """Sets the error_rate75 of this Lane.


        :param error_rate75: The error_rate75 of this Lane.  # noqa: E501
        :type: float
        """

        self._error_rate75 = error_rate75

    @property
    def intensity_cycle1(self):
        """Gets the intensity_cycle1 of this Lane.  # noqa: E501


        :return: The intensity_cycle1 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._intensity_cycle1

    @intensity_cycle1.setter
    def intensity_cycle1(self, intensity_cycle1):
        """Sets the intensity_cycle1 of this Lane.


        :param intensity_cycle1: The intensity_cycle1 of this Lane.  # noqa: E501
        :type: float
        """

        self._intensity_cycle1 = intensity_cycle1

    @property
    def lane_number(self):
        """Gets the lane_number of this Lane.  # noqa: E501


        :return: The lane_number of this Lane.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this Lane.


        :param lane_number: The lane_number of this Lane.  # noqa: E501
        :type: int
        """

        self._lane_number = lane_number

    @property
    def max_cycle_called(self):
        """Gets the max_cycle_called of this Lane.  # noqa: E501


        :return: The max_cycle_called of this Lane.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_called

    @max_cycle_called.setter
    def max_cycle_called(self, max_cycle_called):
        """Sets the max_cycle_called of this Lane.


        :param max_cycle_called: The max_cycle_called of this Lane.  # noqa: E501
        :type: int
        """

        self._max_cycle_called = max_cycle_called

    @property
    def max_projected_yield_in_gbp(self):
        """Gets the max_projected_yield_in_gbp of this Lane.  # noqa: E501


        :return: The max_projected_yield_in_gbp of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._max_projected_yield_in_gbp

    @max_projected_yield_in_gbp.setter
    def max_projected_yield_in_gbp(self, max_projected_yield_in_gbp):
        """Sets the max_projected_yield_in_gbp of this Lane.


        :param max_projected_yield_in_gbp: The max_projected_yield_in_gbp of this Lane.  # noqa: E501
        :type: float
        """

        self._max_projected_yield_in_gbp = max_projected_yield_in_gbp

    @property
    def percent_aligned(self):
        """Gets the percent_aligned of this Lane.  # noqa: E501


        :return: The percent_aligned of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._percent_aligned

    @percent_aligned.setter
    def percent_aligned(self, percent_aligned):
        """Sets the percent_aligned of this Lane.


        :param percent_aligned: The percent_aligned of this Lane.  # noqa: E501
        :type: float
        """

        self._percent_aligned = percent_aligned

    @property
    def percent_gt_q30(self):
        """Gets the percent_gt_q30 of this Lane.  # noqa: E501


        :return: The percent_gt_q30 of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30

    @percent_gt_q30.setter
    def percent_gt_q30(self, percent_gt_q30):
        """Sets the percent_gt_q30 of this Lane.


        :param percent_gt_q30: The percent_gt_q30 of this Lane.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30 = percent_gt_q30

    @property
    def percent_gt_q30_last10_cycles(self):
        """Gets the percent_gt_q30_last10_cycles of this Lane.  # noqa: E501


        :return: The percent_gt_q30_last10_cycles of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_last10_cycles

    @percent_gt_q30_last10_cycles.setter
    def percent_gt_q30_last10_cycles(self, percent_gt_q30_last10_cycles):
        """Sets the percent_gt_q30_last10_cycles of this Lane.


        :param percent_gt_q30_last10_cycles: The percent_gt_q30_last10_cycles of this Lane.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles

    @property
    def percent_pf(self):
        """Gets the percent_pf of this Lane.  # noqa: E501


        :return: The percent_pf of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._percent_pf

    @percent_pf.setter
    def percent_pf(self, percent_pf):
        """Sets the percent_pf of this Lane.


        :param percent_pf: The percent_pf of this Lane.  # noqa: E501
        :type: float
        """

        self._percent_pf = percent_pf

    @property
    def phasing(self):
        """Gets the phasing of this Lane.  # noqa: E501


        :return: The phasing of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._phasing

    @phasing.setter
    def phasing(self, phasing):
        """Sets the phasing of this Lane.


        :param phasing: The phasing of this Lane.  # noqa: E501
        :type: float
        """

        self._phasing = phasing

    @property
    def pre_phasing(self):
        """Gets the pre_phasing of this Lane.  # noqa: E501


        :return: The pre_phasing of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing

    @pre_phasing.setter
    def pre_phasing(self, pre_phasing):
        """Sets the pre_phasing of this Lane.


        :param pre_phasing: The pre_phasing of this Lane.  # noqa: E501
        :type: float
        """

        self._pre_phasing = pre_phasing

    @property
    def projected_yield_in_gbp(self):
        """Gets the projected_yield_in_gbp of this Lane.  # noqa: E501


        :return: The projected_yield_in_gbp of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._projected_yield_in_gbp

    @projected_yield_in_gbp.setter
    def projected_yield_in_gbp(self, projected_yield_in_gbp):
        """Sets the projected_yield_in_gbp of this Lane.


        :param projected_yield_in_gbp: The projected_yield_in_gbp of this Lane.  # noqa: E501
        :type: float
        """

        self._projected_yield_in_gbp = projected_yield_in_gbp

    @property
    def reads(self):
        """Gets the reads of this Lane.  # noqa: E501


        :return: The reads of this Lane.  # noqa: E501
        :rtype: int
        """
        return self._reads

    @reads.setter
    def reads(self, reads):
        """Sets the reads of this Lane.


        :param reads: The reads of this Lane.  # noqa: E501
        :type: int
        """

        self._reads = reads

    @property
    def reads_pf(self):
        """Gets the reads_pf of this Lane.  # noqa: E501


        :return: The reads_pf of this Lane.  # noqa: E501
        :rtype: int
        """
        return self._reads_pf

    @reads_pf.setter
    def reads_pf(self, reads_pf):
        """Sets the reads_pf of this Lane.


        :param reads_pf: The reads_pf of this Lane.  # noqa: E501
        :type: int
        """

        self._reads_pf = reads_pf

    @property
    def status(self):
        """Gets the status of this Lane.  # noqa: E501


        :return: The status of this Lane.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Lane.


        :param status: The status of this Lane.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def _yield(self):
        """Gets the _yield of this Lane.  # noqa: E501


        :return: The _yield of this Lane.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this Lane.


        :param _yield: The _yield of this Lane.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def href_comments(self):
        """Gets the href_comments of this Lane.  # noqa: E501


        :return: The href_comments of this Lane.  # noqa: E501
        :rtype: str
        """
        return self._href_comments

    @href_comments.setter
    def href_comments(self, href_comments):
        """Sets the href_comments of this Lane.


        :param href_comments: The href_comments of this Lane.  # noqa: E501
        :type: str
        """

        self._href_comments = href_comments

    @property
    def contains_comments(self):
        """Gets the contains_comments of this Lane.  # noqa: E501


        :return: The contains_comments of this Lane.  # noqa: E501
        :rtype: bool
        """
        return self._contains_comments

    @contains_comments.setter
    def contains_comments(self, contains_comments):
        """Sets the contains_comments of this Lane.


        :param contains_comments: The contains_comments of this Lane.  # noqa: E501
        :type: bool
        """

        self._contains_comments = contains_comments

    @property
    def href_lane_sequencing_stats(self):
        """Gets the href_lane_sequencing_stats of this Lane.  # noqa: E501


        :return: The href_lane_sequencing_stats of this Lane.  # noqa: E501
        :rtype: str
        """
        return self._href_lane_sequencing_stats

    @href_lane_sequencing_stats.setter
    def href_lane_sequencing_stats(self, href_lane_sequencing_stats):
        """Sets the href_lane_sequencing_stats of this Lane.


        :param href_lane_sequencing_stats: The href_lane_sequencing_stats of this Lane.  # noqa: E501
        :type: str
        """

        self._href_lane_sequencing_stats = href_lane_sequencing_stats

    @property
    def phasing_slope(self):
        """Gets the phasing_slope of this Lane.  # noqa: E501


        :return: The phasing_slope of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._phasing_slope

    @phasing_slope.setter
    def phasing_slope(self, phasing_slope):
        """Sets the phasing_slope of this Lane.


        :param phasing_slope: The phasing_slope of this Lane.  # noqa: E501
        :type: float
        """

        self._phasing_slope = phasing_slope

    @property
    def phasing_offset(self):
        """Gets the phasing_offset of this Lane.  # noqa: E501


        :return: The phasing_offset of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._phasing_offset

    @phasing_offset.setter
    def phasing_offset(self, phasing_offset):
        """Sets the phasing_offset of this Lane.


        :param phasing_offset: The phasing_offset of this Lane.  # noqa: E501
        :type: float
        """

        self._phasing_offset = phasing_offset

    @property
    def pre_phasing_slope(self):
        """Gets the pre_phasing_slope of this Lane.  # noqa: E501


        :return: The pre_phasing_slope of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_slope

    @pre_phasing_slope.setter
    def pre_phasing_slope(self, pre_phasing_slope):
        """Sets the pre_phasing_slope of this Lane.


        :param pre_phasing_slope: The pre_phasing_slope of this Lane.  # noqa: E501
        :type: float
        """

        self._pre_phasing_slope = pre_phasing_slope

    @property
    def pre_phasing_offset(self):
        """Gets the pre_phasing_offset of this Lane.  # noqa: E501


        :return: The pre_phasing_offset of this Lane.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_offset

    @pre_phasing_offset.setter
    def pre_phasing_offset(self, pre_phasing_offset):
        """Sets the pre_phasing_offset of this Lane.


        :param pre_phasing_offset: The pre_phasing_offset of this Lane.  # noqa: E501
        :type: float
        """

        self._pre_phasing_offset = pre_phasing_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lane, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lane):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
