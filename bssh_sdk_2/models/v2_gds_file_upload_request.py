# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2GdsFileUploadRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_folder_path': 'str',
        'target': 'str',
        'id': 'str'
    }

    attribute_map = {
        'destination_folder_path': 'DestinationFolderPath',
        'target': 'Target',
        'id': 'Id'
    }

    def __init__(self, destination_folder_path=None, target=None, id=None):  # noqa: E501
        """V2GdsFileUploadRequest - a model defined in Swagger"""  # noqa: E501
        self._destination_folder_path = None
        self._target = None
        self._id = None
        self.discriminator = None
        self.destination_folder_path = destination_folder_path
        self.target = target
        self.id = id

    @property
    def destination_folder_path(self):
        """Gets the destination_folder_path of this V2GdsFileUploadRequest.  # noqa: E501

        The folder path from the GDS volume to upload the file to  # noqa: E501

        :return: The destination_folder_path of this V2GdsFileUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination_folder_path

    @destination_folder_path.setter
    def destination_folder_path(self, destination_folder_path):
        """Sets the destination_folder_path of this V2GdsFileUploadRequest.

        The folder path from the GDS volume to upload the file to  # noqa: E501

        :param destination_folder_path: The destination_folder_path of this V2GdsFileUploadRequest.  # noqa: E501
        :type: str
        """
        if destination_folder_path is None:
            raise ValueError("Invalid value for `destination_folder_path`, must not be `None`")  # noqa: E501

        self._destination_folder_path = destination_folder_path

    @property
    def target(self):
        """Gets the target of this V2GdsFileUploadRequest.  # noqa: E501

        The service to upload the file to. For example, target=gds will upload the file to the user's gds volume  # noqa: E501

        :return: The target of this V2GdsFileUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this V2GdsFileUploadRequest.

        The service to upload the file to. For example, target=gds will upload the file to the user's gds volume  # noqa: E501

        :param target: The target of this V2GdsFileUploadRequest.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def id(self):
        """Gets the id of this V2GdsFileUploadRequest.  # noqa: E501

        The Id of the resource  # noqa: E501

        :return: The id of this V2GdsFileUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2GdsFileUploadRequest.

        The Id of the resource  # noqa: E501

        :param id: The id of this V2GdsFileUploadRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2GdsFileUploadRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2GdsFileUploadRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
