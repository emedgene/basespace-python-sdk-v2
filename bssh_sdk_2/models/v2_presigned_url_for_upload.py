# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PresignedUrlForUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'single_part_url': 'str',
        'multipart_upload_id': 'str',
        'multipart_template': 'str',
        'multipart_signatures': 'list[V2PartInfo]',
        'server_side_encryption_method': 'str',
        'server_side_encryption_aws_kms_key_id': 'str'
    }

    attribute_map = {
        'single_part_url': 'SinglePartUrl',
        'multipart_upload_id': 'MultipartUploadId',
        'multipart_template': 'MultipartTemplate',
        'multipart_signatures': 'MultipartSignatures',
        'server_side_encryption_method': 'ServerSideEncryptionMethod',
        'server_side_encryption_aws_kms_key_id': 'ServerSideEncryptionAwsKmsKeyId'
    }

    def __init__(self, single_part_url=None, multipart_upload_id=None, multipart_template=None, multipart_signatures=None, server_side_encryption_method=None, server_side_encryption_aws_kms_key_id=None):  # noqa: E501
        """V2PresignedUrlForUpload - a model defined in Swagger"""  # noqa: E501
        self._single_part_url = None
        self._multipart_upload_id = None
        self._multipart_template = None
        self._multipart_signatures = None
        self._server_side_encryption_method = None
        self._server_side_encryption_aws_kms_key_id = None
        self.discriminator = None
        if single_part_url is not None:
            self.single_part_url = single_part_url
        if multipart_upload_id is not None:
            self.multipart_upload_id = multipart_upload_id
        if multipart_template is not None:
            self.multipart_template = multipart_template
        if multipart_signatures is not None:
            self.multipart_signatures = multipart_signatures
        if server_side_encryption_method is not None:
            self.server_side_encryption_method = server_side_encryption_method
        if server_side_encryption_aws_kms_key_id is not None:
            self.server_side_encryption_aws_kms_key_id = server_side_encryption_aws_kms_key_id

    @property
    def single_part_url(self):
        """Gets the single_part_url of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The single_part_url of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: str
        """
        return self._single_part_url

    @single_part_url.setter
    def single_part_url(self, single_part_url):
        """Sets the single_part_url of this V2PresignedUrlForUpload.


        :param single_part_url: The single_part_url of this V2PresignedUrlForUpload.  # noqa: E501
        :type: str
        """

        self._single_part_url = single_part_url

    @property
    def multipart_upload_id(self):
        """Gets the multipart_upload_id of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The multipart_upload_id of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: str
        """
        return self._multipart_upload_id

    @multipart_upload_id.setter
    def multipart_upload_id(self, multipart_upload_id):
        """Sets the multipart_upload_id of this V2PresignedUrlForUpload.


        :param multipart_upload_id: The multipart_upload_id of this V2PresignedUrlForUpload.  # noqa: E501
        :type: str
        """

        self._multipart_upload_id = multipart_upload_id

    @property
    def multipart_template(self):
        """Gets the multipart_template of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The multipart_template of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: str
        """
        return self._multipart_template

    @multipart_template.setter
    def multipart_template(self, multipart_template):
        """Sets the multipart_template of this V2PresignedUrlForUpload.


        :param multipart_template: The multipart_template of this V2PresignedUrlForUpload.  # noqa: E501
        :type: str
        """

        self._multipart_template = multipart_template

    @property
    def multipart_signatures(self):
        """Gets the multipart_signatures of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The multipart_signatures of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: list[V2PartInfo]
        """
        return self._multipart_signatures

    @multipart_signatures.setter
    def multipart_signatures(self, multipart_signatures):
        """Sets the multipart_signatures of this V2PresignedUrlForUpload.


        :param multipart_signatures: The multipart_signatures of this V2PresignedUrlForUpload.  # noqa: E501
        :type: list[V2PartInfo]
        """

        self._multipart_signatures = multipart_signatures

    @property
    def server_side_encryption_method(self):
        """Gets the server_side_encryption_method of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The server_side_encryption_method of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: str
        """
        return self._server_side_encryption_method

    @server_side_encryption_method.setter
    def server_side_encryption_method(self, server_side_encryption_method):
        """Sets the server_side_encryption_method of this V2PresignedUrlForUpload.


        :param server_side_encryption_method: The server_side_encryption_method of this V2PresignedUrlForUpload.  # noqa: E501
        :type: str
        """

        self._server_side_encryption_method = server_side_encryption_method

    @property
    def server_side_encryption_aws_kms_key_id(self):
        """Gets the server_side_encryption_aws_kms_key_id of this V2PresignedUrlForUpload.  # noqa: E501


        :return: The server_side_encryption_aws_kms_key_id of this V2PresignedUrlForUpload.  # noqa: E501
        :rtype: str
        """
        return self._server_side_encryption_aws_kms_key_id

    @server_side_encryption_aws_kms_key_id.setter
    def server_side_encryption_aws_kms_key_id(self, server_side_encryption_aws_kms_key_id):
        """Sets the server_side_encryption_aws_kms_key_id of this V2PresignedUrlForUpload.


        :param server_side_encryption_aws_kms_key_id: The server_side_encryption_aws_kms_key_id of this V2PresignedUrlForUpload.  # noqa: E501
        :type: str
        """

        self._server_side_encryption_aws_kms_key_id = server_side_encryption_aws_kms_key_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PresignedUrlForUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PresignedUrlForUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
