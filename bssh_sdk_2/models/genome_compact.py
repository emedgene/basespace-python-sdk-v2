# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenomeCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'species_name': 'str',
        'source': 'str',
        'build': 'str',
        'href': 'str',
        'href_file_sets': 'str',
        'href_annotations': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'display_name': 'DisplayName',
        'species_name': 'SpeciesName',
        'source': 'Source',
        'build': 'Build',
        'href': 'Href',
        'href_file_sets': 'HrefFileSets',
        'href_annotations': 'HrefAnnotations'
    }

    def __init__(self, id=None, display_name=None, species_name=None, source=None, build=None, href=None, href_file_sets=None, href_annotations=None):  # noqa: E501
        """GenomeCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._species_name = None
        self._source = None
        self._build = None
        self._href = None
        self._href_file_sets = None
        self._href_annotations = None
        self.discriminator = None
        self.id = id
        if display_name is not None:
            self.display_name = display_name
        if species_name is not None:
            self.species_name = species_name
        if source is not None:
            self.source = source
        if build is not None:
            self.build = build
        if href is not None:
            self.href = href
        if href_file_sets is not None:
            self.href_file_sets = href_file_sets
        if href_annotations is not None:
            self.href_annotations = href_annotations

    @property
    def id(self):
        """Gets the id of this GenomeCompact.  # noqa: E501


        :return: The id of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenomeCompact.


        :param id: The id of this GenomeCompact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this GenomeCompact.  # noqa: E501


        :return: The display_name of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GenomeCompact.


        :param display_name: The display_name of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def species_name(self):
        """Gets the species_name of this GenomeCompact.  # noqa: E501


        :return: The species_name of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._species_name

    @species_name.setter
    def species_name(self, species_name):
        """Sets the species_name of this GenomeCompact.


        :param species_name: The species_name of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._species_name = species_name

    @property
    def source(self):
        """Gets the source of this GenomeCompact.  # noqa: E501


        :return: The source of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GenomeCompact.


        :param source: The source of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def build(self):
        """Gets the build of this GenomeCompact.  # noqa: E501


        :return: The build of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this GenomeCompact.


        :param build: The build of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def href(self):
        """Gets the href of this GenomeCompact.  # noqa: E501


        :return: The href of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this GenomeCompact.


        :param href: The href of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def href_file_sets(self):
        """Gets the href_file_sets of this GenomeCompact.  # noqa: E501


        :return: The href_file_sets of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_file_sets

    @href_file_sets.setter
    def href_file_sets(self, href_file_sets):
        """Sets the href_file_sets of this GenomeCompact.


        :param href_file_sets: The href_file_sets of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._href_file_sets = href_file_sets

    @property
    def href_annotations(self):
        """Gets the href_annotations of this GenomeCompact.  # noqa: E501


        :return: The href_annotations of this GenomeCompact.  # noqa: E501
        :rtype: str
        """
        return self._href_annotations

    @href_annotations.setter
    def href_annotations(self, href_annotations):
        """Sets the href_annotations of this GenomeCompact.


        :param href_annotations: The href_annotations of this GenomeCompact.  # noqa: E501
        :type: str
        """

        self._href_annotations = href_annotations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenomeCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenomeCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
