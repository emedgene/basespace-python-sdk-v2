# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IDictionary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item': 'object',
        'keys': 'ICollection',
        'values': 'ICollection',
        'is_read_only': 'bool',
        'is_fixed_size': 'bool'
    }

    attribute_map = {
        'item': 'Item',
        'keys': 'Keys',
        'values': 'Values',
        'is_read_only': 'IsReadOnly',
        'is_fixed_size': 'IsFixedSize'
    }

    def __init__(self, item=None, keys=None, values=None, is_read_only=None, is_fixed_size=None):  # noqa: E501
        """IDictionary - a model defined in Swagger"""  # noqa: E501
        self._item = None
        self._keys = None
        self._values = None
        self._is_read_only = None
        self._is_fixed_size = None
        self.discriminator = None
        self.item = item
        self.keys = keys
        self.values = values
        self.is_read_only = is_read_only
        self.is_fixed_size = is_fixed_size

    @property
    def item(self):
        """Gets the item of this IDictionary.  # noqa: E501


        :return: The item of this IDictionary.  # noqa: E501
        :rtype: object
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this IDictionary.


        :param item: The item of this IDictionary.  # noqa: E501
        :type: object
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501

        self._item = item

    @property
    def keys(self):
        """Gets the keys of this IDictionary.  # noqa: E501


        :return: The keys of this IDictionary.  # noqa: E501
        :rtype: ICollection
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this IDictionary.


        :param keys: The keys of this IDictionary.  # noqa: E501
        :type: ICollection
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501

        self._keys = keys

    @property
    def values(self):
        """Gets the values of this IDictionary.  # noqa: E501


        :return: The values of this IDictionary.  # noqa: E501
        :rtype: ICollection
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this IDictionary.


        :param values: The values of this IDictionary.  # noqa: E501
        :type: ICollection
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def is_read_only(self):
        """Gets the is_read_only of this IDictionary.  # noqa: E501


        :return: The is_read_only of this IDictionary.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this IDictionary.


        :param is_read_only: The is_read_only of this IDictionary.  # noqa: E501
        :type: bool
        """
        if is_read_only is None:
            raise ValueError("Invalid value for `is_read_only`, must not be `None`")  # noqa: E501

        self._is_read_only = is_read_only

    @property
    def is_fixed_size(self):
        """Gets the is_fixed_size of this IDictionary.  # noqa: E501


        :return: The is_fixed_size of this IDictionary.  # noqa: E501
        :rtype: bool
        """
        return self._is_fixed_size

    @is_fixed_size.setter
    def is_fixed_size(self, is_fixed_size):
        """Sets the is_fixed_size of this IDictionary.


        :param is_fixed_size: The is_fixed_size of this IDictionary.  # noqa: E501
        :type: bool
        """
        if is_fixed_size is None:
            raise ValueError("Invalid value for `is_fixed_size`, must not be `None`")  # noqa: E501

        self._is_fixed_size = is_fixed_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDictionary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDictionary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
