# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2InstrumentDiagnostic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'status': 'str',
        'instrument_diagnostic_dataset': 'V2DatasetCompact',
        'instrument': 'RegisteredInstrumentCompact'
    }

    attribute_map = {
        'id': 'Id',
        'href': 'Href',
        'status': 'Status',
        'instrument_diagnostic_dataset': 'InstrumentDiagnosticDataset',
        'instrument': 'Instrument'
    }

    def __init__(self, id=None, href=None, status=None, instrument_diagnostic_dataset=None, instrument=None):  # noqa: E501
        """V2InstrumentDiagnostic - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._status = None
        self._instrument_diagnostic_dataset = None
        self._instrument = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        if status is not None:
            self.status = status
        if instrument_diagnostic_dataset is not None:
            self.instrument_diagnostic_dataset = instrument_diagnostic_dataset
        if instrument is not None:
            self.instrument = instrument

    @property
    def id(self):
        """Gets the id of this V2InstrumentDiagnostic.  # noqa: E501


        :return: The id of this V2InstrumentDiagnostic.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2InstrumentDiagnostic.


        :param id: The id of this V2InstrumentDiagnostic.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this V2InstrumentDiagnostic.  # noqa: E501


        :return: The href of this V2InstrumentDiagnostic.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this V2InstrumentDiagnostic.


        :param href: The href of this V2InstrumentDiagnostic.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def status(self):
        """Gets the status of this V2InstrumentDiagnostic.  # noqa: E501


        :return: The status of this V2InstrumentDiagnostic.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2InstrumentDiagnostic.


        :param status: The status of this V2InstrumentDiagnostic.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def instrument_diagnostic_dataset(self):
        """Gets the instrument_diagnostic_dataset of this V2InstrumentDiagnostic.  # noqa: E501


        :return: The instrument_diagnostic_dataset of this V2InstrumentDiagnostic.  # noqa: E501
        :rtype: V2DatasetCompact
        """
        return self._instrument_diagnostic_dataset

    @instrument_diagnostic_dataset.setter
    def instrument_diagnostic_dataset(self, instrument_diagnostic_dataset):
        """Sets the instrument_diagnostic_dataset of this V2InstrumentDiagnostic.


        :param instrument_diagnostic_dataset: The instrument_diagnostic_dataset of this V2InstrumentDiagnostic.  # noqa: E501
        :type: V2DatasetCompact
        """

        self._instrument_diagnostic_dataset = instrument_diagnostic_dataset

    @property
    def instrument(self):
        """Gets the instrument of this V2InstrumentDiagnostic.  # noqa: E501


        :return: The instrument of this V2InstrumentDiagnostic.  # noqa: E501
        :rtype: RegisteredInstrumentCompact
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this V2InstrumentDiagnostic.


        :param instrument: The instrument of this V2InstrumentDiagnostic.  # noqa: E501
        :type: RegisteredInstrumentCompact
        """

        self._instrument = instrument

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2InstrumentDiagnostic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2InstrumentDiagnostic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
