# coding: utf-8

"""
    Basespace API

    Basespace REST API  # noqa: E501

    OpenAPI spec version: 5.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LibraryIndexCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'sequence': 'str',
        'reagent_guide_position': 'str',
        'incompatibility': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'sequence': 'Sequence',
        'reagent_guide_position': 'ReagentGuidePosition',
        'incompatibility': 'Incompatibility'
    }

    def __init__(self, id=None, name=None, sequence=None, reagent_guide_position=None, incompatibility=None):  # noqa: E501
        """LibraryIndexCompact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._sequence = None
        self._reagent_guide_position = None
        self._incompatibility = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sequence is not None:
            self.sequence = sequence
        if reagent_guide_position is not None:
            self.reagent_guide_position = reagent_guide_position
        if incompatibility is not None:
            self.incompatibility = incompatibility

    @property
    def id(self):
        """Gets the id of this LibraryIndexCompact.  # noqa: E501


        :return: The id of this LibraryIndexCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LibraryIndexCompact.


        :param id: The id of this LibraryIndexCompact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LibraryIndexCompact.  # noqa: E501


        :return: The name of this LibraryIndexCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryIndexCompact.


        :param name: The name of this LibraryIndexCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sequence(self):
        """Gets the sequence of this LibraryIndexCompact.  # noqa: E501


        :return: The sequence of this LibraryIndexCompact.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this LibraryIndexCompact.


        :param sequence: The sequence of this LibraryIndexCompact.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def reagent_guide_position(self):
        """Gets the reagent_guide_position of this LibraryIndexCompact.  # noqa: E501


        :return: The reagent_guide_position of this LibraryIndexCompact.  # noqa: E501
        :rtype: str
        """
        return self._reagent_guide_position

    @reagent_guide_position.setter
    def reagent_guide_position(self, reagent_guide_position):
        """Sets the reagent_guide_position of this LibraryIndexCompact.


        :param reagent_guide_position: The reagent_guide_position of this LibraryIndexCompact.  # noqa: E501
        :type: str
        """

        self._reagent_guide_position = reagent_guide_position

    @property
    def incompatibility(self):
        """Gets the incompatibility of this LibraryIndexCompact.  # noqa: E501


        :return: The incompatibility of this LibraryIndexCompact.  # noqa: E501
        :rtype: str
        """
        return self._incompatibility

    @incompatibility.setter
    def incompatibility(self, incompatibility):
        """Sets the incompatibility of this LibraryIndexCompact.


        :param incompatibility: The incompatibility of this LibraryIndexCompact.  # noqa: E501
        :type: str
        """

        self._incompatibility = incompatibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryIndexCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryIndexCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
